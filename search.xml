<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络(四)：网络层(二)</title>
      <link href="/2020/02/03/network-4-2/"/>
      <url>/2020/02/03/network-4-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网际控制报文协议-icmp"><a class="markdownIt-Anchor" href="#1-网际控制报文协议-icmp"></a> 1 网际控制报文协议 ICMP</h2><p>为了提高 IP 数据报交付成功的机会，在网际层使用了网际控制报文协议 ICMP (Internet Control Message Protocol)。ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。ICMP 不是高层协议，而是 IP 层的协议。ICMP 报文作为 IP 层数据报的数据，加上数据报的首部，组成 IP 数据报发送出去。</p><p><a href="/pic/network/4-24.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-24.png" class="lazyload"></a></p><h3 id="11-icmp-报文的种类"><a class="markdownIt-Anchor" href="#11-icmp-报文的种类"></a> 1.1 ICMP 报文的种类</h3><p>ICMP 报文的种类有两种，即 <strong>ICMP 差错报告报文</strong>和 <strong>ICMP 询问报文</strong>。</p><p>ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即<strong>类型</strong>、<strong>代码</strong>和<strong>检验和</strong>。接着的 4 个字节的内容与 ICMP 的类型有关。</p><p><strong>ICMP 差错报告报文种类</strong>：</p><ol><li>终点不可达</li><li>源点抑制</li><li>时间超过</li><li>参数问题</li><li>改变路由（重定向）</li></ol><p><strong>ICMP 差错报告报文的数据字段的内容</strong></p><p><a href="/pic/network/4-25.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-25.png" class="lazyload"></a></p><p>不应发送 ICMP 差错报告报文的几种情况：</p><ol><li>对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。</li><li>对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文。</li><li>对具有多播地址的数据报都不发送 ICMP 差错报告报文。</li><li>对具有特殊地址（如127.0.0.0 或 0.0.0.0）的数据报不发送 ICMP 差错报告报文。</li></ol><hr><p><strong>ICMP 询问报文种类</strong></p><ol><li>回送请求和回答报文</li><li>时间戳请求和回答报文</li></ol><h3 id="12-icmp的应用举例"><a class="markdownIt-Anchor" href="#12-icmp的应用举例"></a> 1.2 ICMP的应用举例</h3><p><strong>PING 命令</strong></p><ul><li>PING 用来测试两个主机之间的连通性。</li><li>PING 使用了 <strong>ICMP 回送请求与回送回答报文</strong>。</li><li>PING 是<strong>应用层直接使用网络层 ICMP</strong> 的例子，它没有通过运输层的 TCP 或UDP。</li></ul><p><strong>Traceroute 命令</strong></p><ul><li>traceroute 命令利用ICMP 协议定位您的计算机和目标计算机之间的所有路由器。</li><li>TTL 值可以反映数据包经过的路由器或网关的数量，通过操纵独立ICMP 呼叫报文的TTL 值和观察该报文被抛弃的返回信息，traceroute命令能够遍历到数据包传输路径上的所有路由器。</li><li>基于 UDP 实现和基于 ICMP 实现。</li></ul><h2 id="2-因特网的路由选择协议"><a class="markdownIt-Anchor" href="#2-因特网的路由选择协议"></a> 2 因特网的路由选择协议</h2><h3 id="21-路由选择协议的基本概念"><a class="markdownIt-Anchor" href="#21-路由选择协议的基本概念"></a> 2.1 路由选择协议的基本概念</h3><p><strong>最佳路由</strong></p><p>不存在一种绝对的最佳路由算法。所谓“最佳”只能是相对于某一种特定要求下得出的较为合理的选择而已。实际的路由选择算法，应尽可能接近于理想的算法。路由选择是个非常复杂的问题，它是网络中的所有结点共同协调工作的结果。路由选择的环境往往是不断变化的，而这种变化有时无法事先知道。</p><hr><p>从路由算法的<strong>自适应性</strong>考虑</p><ul><li><strong>静态路由选择策略</strong>：即非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。</li><li><strong>动态路由选择策略</strong>：即自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。</li></ul><hr><p><strong>分层次的路由选择协议</strong></p><p>因特网采用分层次的路由选择协议。</p><p>因特网的规模非常大。如果让所有的路由器知道所有的网络应怎样到达，则这种路由表将非常大，处理起来也太花时间。而所有这些路由器之间交换路由信息所需的带宽就会使因特网的通信链路饱和。</p><p>许多单位不愿意外界了解自己单位网络的布局细节和本部门所采用的路由选择协议（这属于本部门内部的事情），但同时还希望连接到因特网上。</p><hr><p><strong>自治系统 AS</strong> (Autonomous System)</p><p>定义：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。</p><p>现在对自治系统 AS 的定义是强调下面的事实：尽管一个 AS 使用了多种内部路由选择协议和度量，但重要的是一个 AS 对其他 AS 表现出的是一个<strong>单一的</strong>和<strong>一致的路由选择策略</strong>。</p><hr><p><strong>因特网有两大类路由选择协议</strong></p><p><strong>内部网关协议 IGP</strong>：即在一个自治系统内部使用的路由选择协议。目前这类路由选择协议使用得最多，如 <strong>RIP</strong> 和 <strong>OSPF</strong> 协议。</p><p><strong>外部网关协议 EGP</strong>：若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。这样的协议就是外部网关协议 EGP。在外部网关协议中目前使用最多的是 <strong>BGP-4</strong>。</p><p><a href="/pic/network/4-26.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-26.png" class="lazyload"></a></p><hr><h3 id="22-内部网关协议-rip"><a class="markdownIt-Anchor" href="#22-内部网关协议-rip"></a> 2.2 内部网关协议 RIP</h3><p><strong>工作原理</strong></p><p>路由信息协议 RIP 是内部网关协议 IGP中最先得到广泛使用的协议。</p><p>RIP 是一种分布式的基于<strong>距离向量</strong>的路由选择协议。</p><p>RIP 协议要求网络中的每一个路由器都要维护<strong>从它自己到其他每一个目的网络的距离记录</strong>。</p><hr><p>“<strong>距离</strong>”的定义</p><ul><li>从一路由器到直接连接的网络的距离定义为 1；</li><li>从一个路由器到非直接连接的网络的距离定义为所经过的路由器数加 1；</li><li>RIP 协议中的“距离”也称为“跳数”(hop count)，因为每经过一个路由器，跳数就加 1；</li><li>这里的“距离”实际上指的是“最短距离”；</li><li>RIP 认为一个好的路由就是它通过的路由器的数目少，即“距离短”。</li><li>RIP 允许一条路径最多只能包含 15 个路由器。</li><li>“距离”的最大值为16 时即相当于不可达。可见 RIP 只适用于小型互联网。</li><li>RIP 不能在两个网络之间同时使用多条路由。RIP 选择一个具有最少路由器的路由（即最短路由），哪怕还存在另一条高速(低时延)但路由器较多的路由。</li></ul><hr><p><strong>RIP 协议的三个要点</strong></p><ol><li>仅和相邻路由器交换信息。</li><li>交换的信息是当前本路由器所知道的全部信息，即自己的路由表。</li><li>按固定的时间间隔交换路由信息，例如，每隔 30 秒。</li></ol><hr><p><strong>路由表的建立</strong></p><ol><li>路由器在刚刚开始工作时，只知道到直接连接的网络的距离（此距离定义为1）。</li><li>以后，每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息。</li><li>经过若干次更新后，所有的路由器最终都会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器的地址。</li><li>RIP 协议的收敛过程较快，即在自治系统中所有的结点都得到正确的路由选择信息的过程。</li></ol><p><strong>路由器之间交换信息</strong></p><p>RIP协议让互联网中的所有路由器都和自己的相邻路由器不断交换路由信息，并不断更新其路由表，使得从每一个路由器到每一个目的网络的路由都是最短的（即跳数最少）。</p><p>虽然所有的路由器最终都拥有了整个自治系统的全局路由信息，但由于每一个路由器的位置不同，它们的路由表当然也应当是不同的。</p><hr><p><strong>距离向量算法</strong></p><p>收到相邻路由器（其地址为 X）的一个 RIP 报文：</p><ol><li>先修改此 RIP 报文中的所有项目：把“下一跳”字段中的地址都改为 X，并把所有的“距离”字段的值加 1。</li><li>对修改后的 RIP 报文中的每一个项目，重复以下步骤：<ol><li>若项目中的目的网络不在路由表中，则把该项目加到路由表中。</li><li>否则若下一跳字段给出的路由器地址是同样的，则把收到的项 目 替换原路由表中的项目。</li><li>否则若收到项目中的距离小于路由表中的距离，则进行更新，</li><li>否则什么也不做。</li></ol></li><li>若 3 分钟还没有收到相邻路由器的更新路由表，则把此相邻路由器记为不可达路由器，即将距离置为16（距离为16表示不可达）。</li><li>返回。</li></ol><hr><p><strong>RIP2 协议的报文格式</strong></p><p><a href="/pic/network/4-27.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-27.png" class="lazyload"></a></p><p>RIP2 的报文由首部和路由部分组成。</p><ul><li>RIP2 报文中的路由部分由若干个路由信息组成。每个路由信息需要用 20 个字节。</li><li><strong>地址族标识符</strong>（又称为地址类别）字段用来标志所使用的地址协议。</li><li><strong>路由标记</strong>填入自治系统的号码，这是考虑使RIP 有可能收到本自治系统以外的路由选择信息。</li><li>再后面指出某个<strong>网络地址</strong>、该网络的<strong>子网掩码</strong>、<strong>下一跳路由器地址</strong>以及<strong>到此网络的距离</strong>。</li></ul><hr><p><strong>RIP 协议的优缺点</strong></p><ul><li>RIP 存在的一个问题是当网络出现故障时，要经过比较长的时间才能将此信息传送到所有的路由器（     好消息传播得快，而坏消息传播得慢）。</li><li>RIP 协议最大的优点就是实现简单，开销较小。</li><li>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</li><li>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。</li></ul><h3 id="23-内部网关协议-ospf"><a class="markdownIt-Anchor" href="#23-内部网关协议-ospf"></a> 2.3 内部网关协议 OSPF</h3><p><strong>OSPF 协议的基本特点</strong></p><ul><li>“开放”表明 OSPF 协议不是受某一家厂商控制，而是公开发表的；</li><li>“最短路径优先”是因为使用了 Dijkstra 提出的最短路径算法SPF；</li><li>OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”；</li><li>是分布式的链路状态协议；</li></ul><hr><p><strong>三个要点</strong></p><ol><li><p>向本自治系统中<strong>所有路由器</strong>发送信息，这里使用的方法是<strong>洪泛法</strong>。</p></li><li><p>发送的信息就是与本路由器<strong>相邻的所有路由器的链路状态</strong>，但这只是路由器所知道的<strong>部分信息</strong>。</p><p>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。</p></li><li><p>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。</p></li></ol><hr><p><strong>链路状态数据库</strong></p><p>由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。</p><p>这个数据库实际上就是<strong>全网的拓扑结构图</strong>，它在全网范围内是一致的（这称为链路状态数据库的同步）。</p><p>OSPF 的链路状态数据库能较快地进行更新，使各个路由器能及时更新其路由表。OSPF 的更新过程收敛得快是其重要优点。</p><hr><p><strong>OSPF 的区域</strong></p><p>为了使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若干个更小的范围，叫作<strong>区域</strong>。每一个区域都有一个 32 位的区域标识符（用点分十进制表示）。区域也不能太大，在一个区域内的路由器最好不超过 200 个。</p><p>OSPF 划分为两种不同的区域</p><p><a href="/pic/network/4-28.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-28.png" class="lazyload"></a></p><p>划分区域的好处就是将利用洪泛法交换链路状态信息的范围局限于每一个区域而不是整个的自治系统，这就减少了整个网络上的通信量。</p><p>在一个区域内部的路由器只知道本区域的完整网络拓扑，而不知道其他区域的网络拓扑的情况。</p><p>OSPF 使用层次结构的区域划分。在上层的区域叫作<strong>主干区域</strong>。主干区域的标识符规定为0.0.0.0。主干区域的作用是用来连通其他在下层的区域。</p><hr><p><strong>OSPF 直接用 IP 数据报传送</strong></p><p>OSPF 不用 UDP 而是直接用 IP 数据报传送。</p><p>OSPF 构成的数据报很短。这样做可减少路由信息的通信量。</p><p>数据报很短的另一好处是可以不必将长的数据报分片传送。分片传送的数据报只要丢失一个，就无法组装成原来的数据报，而整个数据报就必须重传。</p><hr><p><strong>OSPF 的其他特点</strong></p><ul><li>OSPF 对不同的链路可根据 IP 分组的不同服务类型 TOS 而设置成不同的代价。因此，OSPF 对于不同类型的业务可计算出不同的路由。</li><li>如果到同一个目的网络有多条相同代价的路径，那么可以将通信量分配给这几条路径。这叫作<strong>多路径间的负载平衡</strong>。</li><li>所有在 OSPF 路由器之间交换的分组都具有鉴别的功能。</li><li>支持可变长度的子网划分和无分类编址 CIDR。</li><li>每一个链路状态都带上一个 32 位的序号，序号越大状态就越新。</li></ul><p><a href="/pic/network/4-29.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-29.png" class="lazyload"></a></p><hr><p><strong>OSPF 的分组类型</strong></p><ol><li>问候(Hello)分组。</li><li>数据库描述(Database Description)分组。</li><li>链路状态请求(Link State Request)分组。</li><li>链路状态更新(Link State Update)分组，用洪泛法对全网更新链路状态。</li><li>链路状态确认(Link State Acknowledgment)分组。</li></ol><p><a href="/pic/network/4-30.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-30.png" class="lazyload"></a></p><hr><p><strong>OSPF 的其他特点</strong></p><ul><li>OSPF 还规定每隔一段时间，如 30 分钟，要刷新一次数据库中的链路状态。</li><li>由于一个路由器的链路状态只涉及到与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系。因此当互联网规模很大时，OSPF 协议要比距离向量协议 RIP 好得多。</li><li>OSPF 没有“坏消息传播得慢”的问题，据统计，其响应网络变化的时间小于 100 ms。</li></ul><h3 id="24-外部网关协议-bgp"><a class="markdownIt-Anchor" href="#24-外部网关协议-bgp"></a> 2.4 外部网关协议 BGP</h3><p>BGP 是不同自治系统的路由器之间交换路由信息的协议。</p><p><strong>BGP 使用的环境不同</strong></p><p>因特网的规模太大，使得自治系统之间路由选择非常困难。对于自治系统之间的路由选择，要寻找最佳路由是很不现实的。当一条路径通过几个不同 AS 时，要想对这样的路径计算出有意义的代价是不太可能的。比较合理的做法是在 AS 之间交换“可达性”信息。</p><p>自治系统之间的路由选择必须考虑有关策略。因此，边界网关协议 BGP 只能是力求寻找一条能够到达目的网络且<strong>比较好的路由</strong>（不能兜圈子），而<strong>并非要寻找一条最佳路由</strong>。</p><hr><p><strong>BGP 发言人</strong></p><p>每一个自治系统的管理员要选择至少一个路由器作为该自治系统的“ BGP 发言人” 。</p><p>一般说来，两个 BGP 发言人都是通过一个共享网络连接在一起的，而 BGP 发言人往往就是 BGP 边界路由器，但也可以不是 BGP 边界路由器。</p><hr><p><strong>BGP 交换路由信息</strong></p><p>一个 BGP 发言人与其他自治系统中的 BGP 发言人要交换路由信息，就要先建立 TCP 连接，然后在此连接上交换 BGP 报文以建立 BGP 会话(session)，利用 BGP 会话交换路由信息。</p><p>使用 TCP 连接能提供可靠的服务，也简化了路由选择协议。</p><p>使用 TCP 连接交换路由信息的两个 BGP 发言人，彼此成为对方的邻站或对等站。</p><hr><p><a href="/pic/network/4-31.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-31.png" class="lazyload"></a></p><p>BGP 所交换的网络可达性的信息就是要到达某个网络所要经过的一系列 AS。</p><p>当 BGP 发言人互相交换了网络可达性的信息后，各 BGP 发言人就根据所采用的策略从收到的路由信息中找出到达各 AS 的较好路由。</p><hr><p><strong>BGP 发言人交换路径向量</strong></p><p><a href="/pic/network/4-32.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-32.png" class="lazyload"></a></p><p>自治系统 AS<sub>2</sub> 的 BGP 发言人通知主干网的 BGP 发言人：“要到达网络 N<sub>1</sub>, N<sub>2</sub>, N<sub>3</sub> 和 N<sub>4</sub> 可经过 AS<sub>2</sub>”；</p><p>主干网还可发出通知：“要到达网络 N<sub>5</sub>, N<sub>6</sub> 和 N<sub>7</sub> 可沿路径（AS<sub>1</sub>,AS<sub>3</sub>）” ；</p><hr><p><strong>BGP 协议的特点</strong></p><ul><li>BGP 协议交换路由信息的结点数量级是自治系统数的量级，这要比这些自治系统中的网络数少很多。</li><li>每一个自治系统中 BGP 发言人（或边界路由器）的数目是很少的。这样就使得自治系统之间的路由选择不致过分复杂。</li><li>BGP 支持 CIDR，因此 BGP 的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列。</li><li>在BGP 刚刚运行时，BGP 的邻站是交换整个的 BGP 路由表。但以后只需要在发生变化时更新有变化的部分。这样做对节省网络带宽和减少路由器的处理开销方面都有好处。</li></ul><hr><p><strong>BGP-4 报文种类</strong></p><ol><li>打开(OPEN)报文：用来与相邻的另一个BGP发言人建立关系。</li><li>更新(UPDATE)报文：用来发送某一路由的信息，以及列出要撤消的多条路由。</li><li>保活(KEEPALIVE)报文：用来确认打开报文和周期性地证实邻站关系。</li><li>通知(NOTIFICATION)报文：用来发送检测到的差错。</li></ol><p><strong>BGP 报文具有通用的首部</strong></p><p><a href="/pic/network/4-33.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-33.png" class="lazyload"></a></p><h3 id="25-路由器在网际互连中的作用"><a class="markdownIt-Anchor" href="#25-路由器在网际互连中的作用"></a> 2.5 路由器在网际互连中的作用</h3><p><strong>路由器的结构</strong></p><p>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是<strong>转发分组</strong>。也就是说，将路由器某个输入端口收到的分组，按照分组要去的目的地（即目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器。下一跳路由器也按照这种方法处理分组，直到该分组到达终点为止。</p><p><a href="/pic/network/4-34.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-34.png" class="lazyload"></a></p><hr><p><strong>“转发”和“路由选择”的区别</strong></p><ul><li><p>“转发”(forwarding)就是路由器根据转发表将用户的 IP 数据报从合适的端口转发出去。</p></li><li><p>“路由选择”(routing)则是按照分布式算法，根据从各相邻路由器得到的关于网络拓扑的变化情况，动态地改变所选择的路由。</p></li><li><p>路由表是根据路由选择算法得出的。而转发表是从路由表得出的。</p></li><li><p>在讨论路由选择的原理时，往往不去区分转发表和路由表的区别。</p></li></ul><hr><p>输入端口对线路上收到的分组的处理：</p><p>数据链路层剥去帧首部和尾部后，将分组送到网络层的队列中排队等待处理。这会产生一定的时延。</p><p><a href="/pic/network/4-35.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-35.png" class="lazyload"></a></p><p>输出端口将交换结构传送来的分组发送到线路：</p><p>当交换结构传送过来的分组先进行缓存。数据链路层处理模块将分组加上链路层的首部和尾部，交给物理层后发送到外部线路。</p><p><a href="/pic/network/4-36.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-36.png" class="lazyload"></a></p><hr><p><strong>分组丢弃</strong></p><p>若路由器处理分组的速率赶不上分组进入队列的速率，则队列的存储空间最终必定减少到零，这就使后面再进入队列的分组由于没有存储空间而只能被丢弃。</p><p>路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因。</p><h2 id="3-ip多播"><a class="markdownIt-Anchor" href="#3-ip多播"></a> 3 IP多播</h2><h3 id="31-ip-多播的基本概念"><a class="markdownIt-Anchor" href="#31-ip-多播的基本概念"></a> 3.1 IP 多播的基本概念</h3><p><a href="/pic/network/4-37.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-37.png" class="lazyload"></a></p><p>多播可明显地减少网络中资源的消耗</p><hr><p><strong>IP 多播的特点</strong></p><ol><li>多播使用组地址：IP 使用 D 类地址支持多播。多播地址只能用于目的地址，而不能用于源地址；</li><li>永久组地址：由因特网号码指派管理局 IANA 负责指派；</li><li>动态的组成员；</li><li>使用硬件进行多播；</li></ol><h3 id="32-在局域网上进行硬件多播"><a class="markdownIt-Anchor" href="#32-在局域网上进行硬件多播"></a> 3.2 在局域网上进行硬件多播</h3><p>因特网号码指派管理局 IANA 拥有的以太网地址块的高 24 位为 00-00-5E。</p><p>因此 TCP/IP 协议使用的以太网多播地址块的范围是：从 00-00-5E-00-00-00 到 00-00-5E-FF-FF-FF</p><p>D 类 IP 地址可供分配的有 28 位，在这 28 位中的前 5 位不能用来构成以太网硬件地址。</p><hr><p>D 类 IP 地址与以太网多播地址的映射关系</p><p><a href="/pic/network/4-38.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-38.png" class="lazyload"></a></p><h3 id="33-网际组管理协议-igmp-和多播路由选择协议"><a class="markdownIt-Anchor" href="#33-网际组管理协议-igmp-和多播路由选择协议"></a> 3.3 网际组管理协议 IGMP 和多播路由选择协议</h3><p><strong>IP多播需要两种协议</strong></p><ol><li>为了使路由器知道多播组成员的信息，需要利用<strong>网际组管理协议 IGMP</strong>。</li><li>连接在局域网上的多播路由器还必须和因特网上的其他多播路由器协同工作，以便把多播数据报用最小代价传送给所有的组成员。这就需要使用<strong>多播路由选择协议</strong>。</li></ol><p><a href="/pic/network/4-39.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-39.png" class="lazyload"></a></p><p><strong>IGMP 的本地使用范围</strong></p><ul><li>IGMP 并非在因特网范围内对所有多播组成员进行管理的协议。</li><li>IGMP 不知道 IP 多播组包含的成员数，也不知道这些成员都分布在哪些网络上。</li><li>IGMP 协议是让连接在本地局域网上的多播路由器知道本局域网上是否有主机（严格讲，是主机上的某个进程）参加或退出了某个多播组。</li></ul><p>多播路由选择协议比单播路由选择协议复杂得多：</p><ul><li>多播转发必须<strong>动态地适应</strong>多播组成员的变化（这时网络拓扑并未发生变化）。请注意，单播路由选择通常是在网络拓扑发生变化时才需要更新路由。</li><li>多播路由器在转发多播数据报时，不能仅仅根据多播数据报中的目的地址，而是还要考虑这个多播数据报从什么地方来和要到什么地方去。</li><li>多播数据报可以由没有加入多播组的主机发出，也可以通过没有组成员接入的网络。</li></ul><hr><p>IGMP 是整个网际协议 IP 的一个组成部分和 ICMP 相似，IGMP 使用 IP 数据报传递其报文（即 IGMP 报文加上 IP 首部构成 IP 数据报），但它也向 IP 提供服务。因此，我们不把 IGMP 看成是一个单独的协议，而是属于整个网际协议 IP 的一个组成部分。</p><p><strong>IGMP 可分为两个阶段</strong></p><ul><li>第一阶段：当某个主机加入新的多播组时，该主机应向多播组的多播地址发送IGMP 报文，声明自己要成为该组的成员。本地的多播路由器收到 IGMP 报文后，将组成员关系转发给因特网上的其他多播路由器。</li><li>第二阶段：因为组成员关系是动态的，因此本地多播路由器要周期性地探询本地局域网上的主机，以便知道这些主机是否还继续是组的成员。只要对某个组有一个主机响应，那么多播路由器就认为这个组是活跃的。但一个组在经过几次的探询后仍然没有一个主机响应，则不再将该组的成员关系转发给其他的多播路由器。</li></ul><hr><p><strong>IGMP 采用的一些具体措施</strong></p><ul><li>在主机和多播路由器之间的所有通信都是使用 IP 多播。</li><li>多播路由器在探询组成员关系时，只需要对所有的组发送一个请求信息的询问报文，而不需要对每一个组发送一个询问报文。默认的询问速率是每 125 秒发送一次。</li><li>当同一个网络上连接有几个多播路由器时，它们能够迅速和有效地选择其中的一个来探询主机的成员关系。</li><li>在 IGMP 的询问报文中有一个数值 <em>N</em>，它指明一个最长响应时间（默认值为 10秒）。当收到询问时，主机在 0 到 <em>N</em> 之间随机选择发送响应所需经过的时延。对应于最小时延的响应最先发送。</li><li>同一个组内的每一个主机都要监听响应，只要有本组的其他主机先发送了响应，自己就可以不再发送响应了。</li></ul><hr><p><strong>多播路由选择</strong></p><ul><li>多播路由选择协议尚未标准化。</li><li>一个多播组中的成员是动态变化的，随时会有主机加入或离开这个多播组。</li><li>多播路由选择实际上就是要找出以源主机为根结点的<strong>多播转发树</strong>。</li><li>在多播转发树上的路由器不会收到重复的多播数据报。</li><li>对不同的多播组对应于不同的多播转发树。同一个多播组，对不同的源点也会有不同的多播转发树。</li></ul><hr><p><strong>转发多播数据报使用的方法</strong></p><p>（一）洪泛与剪除</p><p>这种方法适合于较小的多播组，而所有的组成员接入的局域网也是相邻接的。</p><p>一开始，路由器转发多播数据报使用洪泛的方法（这就是广播）。为了避免兜圈子，采用了叫做反向路径广播 RPB (Reverse Path Broadcasting)的策略。</p><p><strong>RPB 的要点</strong></p><ol><li>路由器收到多播数据报时，先检查是否从源点经最短路径传送来的。</li><li>若是，就向所有其他方向转发刚才收到的多播数据报（但进入的方向除外），否则就丢弃而不转发。</li><li>如果存在几条同样长度的最短路径，那么只能选择一条最短路径，选择的准则就是看这几条最短路径中的相邻路由器谁的 IP 地址最小。</li></ol><p><a href="/pic/network/4-40.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-40.png" class="lazyload"></a></p><p>（二）隧道技术</p><p><a href="/pic/network/4-41.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-41.png" class="lazyload"></a></p><p>（三）基于核心的发现技术</p><p>这种方法对于多播组的大小在较大范围内变化时都适合。</p><p>这种方法是对每一个多播组 G 指定一个核心(core)路由器，给出它的 IP 单播地址。</p><p>核心路由器按照前面讲过的方法创建出对应于多播组 G 的转发树。</p><h2 id="4-虚拟专用网-vpn-和网络地址转换-nat"><a class="markdownIt-Anchor" href="#4-虚拟专用网-vpn-和网络地址转换-nat"></a> 4 虚拟专用网 VPN 和网络地址转换 NAT</h2><h3 id="41-虚拟专用网-vpn"><a class="markdownIt-Anchor" href="#41-虚拟专用网-vpn"></a> 4.1 虚拟专用网 VPN</h3><ul><li>本地地址：仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向因特网的管理机构申请。</li><li>全球地址：全球唯一的IP地址，必须向因特网的管理机构申请。</li></ul><p>RFC 1918 指明的专用地址：</p><ul><li>10.0.0.0 到 10.255.255.255</li><li>172.16.0.0 到 172.31.255.255</li><li>192.168.0.0 到 192.168.255.255</li></ul><p>这些地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信。专用地址只能用作本地地址而不能用作全球地址。在因特网中的所有路由器对目的地址是专用地址的数据报一律不进行转发。</p><p>用隧道技术可以实现虚拟专用网</p><p><a href="/pic/network/4-42.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-42.png" class="lazyload"></a></p><hr><p><strong>内联网和外联网</strong></p><p>内联网和外联网都是基于 TCP/IP 协议。</p><ul><li>由部门 A 和 B 的内部网络所构成的虚拟专用网 VPN 又称为内联网(intranet)，表示部门 A 和 B 都是在同一个机构的内部。</li><li>一个机构和某些外部机构共同建立的虚拟专用网 VPN 又称为外联网(extranet)。</li></ul><hr><p><strong>远程接入VPN</strong></p><p>有的公司可能没有分布在不同场所的部门，但有很多流动员工在外地工作。公司需要和他们保持联系，远程接入 VPN 可满足这种需求。</p><p>在外地工作的员工拨号接入因特网，而驻留在员工 PC 机中的 VPN 软件可在员工的 PC 机和公司的主机之间建立 VPN 隧道，因而外地员工与公司通信的内容是保密的，员工们感到好像就是使用公司内部的本地网络。</p><h3 id="42-网络地址转换-nat"><a class="markdownIt-Anchor" href="#42-网络地址转换-nat"></a> 4.2 网络地址转换 NAT</h3><p>网络地址转换 NAT 方法于1994年提出。</p><p>需要在专用网连接到因特网的路由器上安装 NAT 软件。装有 NAT 软件的路由器叫做 NAT路由器，它至少有一个有效的外部全球地址 IP<sub><em>G</em></sub>。</p><p>所有使用本地地址的主机在和外界通信时都要在 NAT 路由器上将其本地地址转换成 IP<sub><em>G</em></sub> 才能和因特网连接。</p><hr><p><strong>网络地址转换的过程</strong></p><ol><li>内部主机 X 用本地地址 IP<sub><em>x</em></sub> 和因特网上主机 Y 通信所发送的数据报必须经过 NAT 路由器。</li><li>NAT 路由器将数据报的源地址 IP<sub><em>x</em></sub> 转换成全球地址 IP<sub><em>G</em></sub>，但目的地址 IP<sub><em>Y</em></sub> 保持不变，然后发送到因特网。</li><li>NAT 路由器收到主机 Y 发回的数据报时，知道数据报中的源地址是 IP<sub><em>Y</em></sub> 而目的地址是 IP<sub><em>G</em></sub>。</li><li>根据 NAT 转换表，NAT 路由器将目的地址 IP<sub><em>G</em></sub> 转换为 IP<sub><em>x</em></sub>，转发给最终的内部主机 X。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络(四)：网络层(一)</title>
      <link href="/2020/02/02/network-4-1/"/>
      <url>/2020/02/02/network-4-1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网络层提供的两种服务"><a class="markdownIt-Anchor" href="#1-网络层提供的两种服务"></a> 1 网络层提供的两种服务</h2><p>在计算机网络领域，网络层应该向运输层提供怎样的服务（“面向连接”还是“无连接”）曾引起了长期的争论。</p><p>争论焦点的实质就是：在计算机通信中，<strong>可靠交付应当由谁来负责</strong>？是<strong>网络</strong>还是<strong>端系统</strong>？</p><p><strong>电信网的成功经验让网络负责可靠交付</strong>：<strong>面向连接</strong>的通信方式；建立虚电路(Virtual Circuit)，以保证双方通信所需的一切网络资源；如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点。</p><p><a href="/pic/network/4-1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-1.png" class="lazyload"></a></p><p><strong>虚电路是逻辑连接</strong>：虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。请注意，电路交换的电话通信是先建立了一条真正的连接。因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样。</p><p><strong>因特网采用的设计思路</strong>：网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</p><p>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。网络层不提供服务质量的承诺。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</p><p><strong>尽最大努力交付的好处</strong></p><ul><li>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉（与电信网的交换机相比较）。</li><li>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的主机中的运输层负责（包括差错处理、流量控制等）。</li><li>采用这种设计思路的好处是：<strong>网络的造价大大降低，运行方式灵活，能够适应多种应用</strong>。</li><li>因特网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</li></ul><p><a href="/pic/network/4-2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-2.png" class="lazyload"></a></p><p><strong>虚电路服务</strong>与<strong>数据报服务</strong>的对比</p><table><thead><tr><th style="text-align:center">对比的方面</th><th style="text-align:center">虚电路服务</th><th style="text-align:center">数据报服务</th></tr></thead><tbody><tr><td style="text-align:center">思路</td><td style="text-align:center">可靠通信应当由网络来保证</td><td style="text-align:center">可靠通信应当由用户主机来保证</td></tr><tr><td style="text-align:center">连接的建立</td><td style="text-align:center">必须有</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">终点地址</td><td style="text-align:center">仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td style="text-align:center">每个分组都有终点的完整地址</td></tr><tr><td style="text-align:center">分组的转发</td><td style="text-align:center">属于同一条虚电路的分组均按照同一路由进行转发</td><td style="text-align:center">每个分组独立选择路由进行转发</td></tr><tr><td style="text-align:center">当结点出故障时</td><td style="text-align:center">所有通过出故障的结点的虚电路均不能工作</td><td style="text-align:center">出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td style="text-align:center">分组的顺序</td><td style="text-align:center">总是按发送顺序到达终点</td><td style="text-align:center">到达终点时不一定按发送顺序</td></tr><tr><td style="text-align:center">端到端的差错处理和流量控制</td><td style="text-align:center">可以由网络负责，也可以由用户主机负责</td><td style="text-align:center">由用户主机负责</td></tr></tbody></table><h2 id="2-网际协议ip"><a class="markdownIt-Anchor" href="#2-网际协议ip"></a> 2 网际协议IP</h2><p>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有四个协议：</p><ol><li><strong>地址解析协议 ARP</strong>  (Address Resolution Protocol)</li><li><strong>逆地址解析协议 RARP</strong>  (Reverse Address Resolution Protocol)</li><li><strong>网际控制报文协议 ICMP</strong>  (Internet Control Message Protocol)</li><li><strong>网际组管理协议 IGMP</strong>  (Internet Group Management Protocol)</li></ol><p><a href="/pic/network/4-3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-3.png" class="lazyload"></a></p><h3 id="21-虚拟互连网络"><a class="markdownIt-Anchor" href="#21-虚拟互连网络"></a> 2.1 虚拟互连网络</h3><p>互连在一起的网络要进行通信，会遇到许多问题需要解决，如不同的寻址方案、不同的最大分组长度、不同的网络接入机制、不同的超时控制等。</p><p>网络互相连接起来要使用一些<strong>中间设备</strong>，中间设备又称为中间系统或中继(relay)系统。</p><ul><li>物理层中继系统：<strong>转发器</strong>(repeater)。</li><li>数据链路层中继系统：<strong>网桥或桥接器</strong>(bridge)。</li><li>网络层中继系统：<strong>路由器</strong>(router)。</li><li>网桥和路由器的混合物：<strong>桥路器</strong>(brouter)。</li><li>网络层以上的中继系统：<strong>网关</strong>(gateway)。</li></ul><p><strong>网络互连使用路由器</strong></p><p>当中继系统是转发器或网桥时，一般并不称之为网络互连，因为这仅仅是把一个网络扩大了，而这仍然是一个网络；网关由于比较复杂，目前使用得较少；互联网都是指用<strong>路由器</strong>进行互连的网络。由于历史的原因，许多有关 TCP/IP 的文献将网络层使用的路由器称为网关。</p><p><strong>虚拟互连网络的意义</strong></p><p>所谓虚拟互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。</p><p>使用 IP 协议的虚拟互连网络可简称为 IP 网。</p><p>使用虚拟互连网络的好处：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。</p><p><a href="/pic/network/4-4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-4.png" class="lazyload"></a></p><p>从网络层看 IP 数据报的传送：如果我们只从网络层考虑问题，那么 IP 数据报就可以想象是在网络层中传送。</p><h3 id="22-分类的-ip-地址"><a class="markdownIt-Anchor" href="#22-分类的-ip-地址"></a> 2.2 分类的 IP 地址</h3><h4 id="221-ip-地址及其表示方法"><a class="markdownIt-Anchor" href="#221-ip-地址及其表示方法"></a> 2.2.1 IP 地址及其表示方法</h4><p>我们把整个因特网看成为一个单一的、抽象的网络。IP 地址就是给每个连接在因特网上的主机（或路由器）分配一个在全世界范围是唯一的 32 位的标识符。</p><p><strong>IP 地址的编址方法</strong></p><ul><li><strong>分类的 IP 地址</strong>：这是最基本的编址方法，在 1981 年就通过了相应的标准协议。</li><li><strong>子网的划分</strong>：这是对最基本的编址方法的改进，其标准[RFC 950]在 1985 年通过。</li><li><strong>构成超网</strong>：这是比较新的无分类编址方法。1993 年提出后很快就得到推广应用。</li></ul><p><strong>分类 IP 地址</strong></p><p>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号</strong> net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号</strong> host-id，它标志该主机（或路由器）。两级的 IP 地址可以记为：</p><pre class="highlight"><code class>IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}     （::= 代表“定义为”）</code></pre><p><a href="/pic/network/4-5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-5.png" class="lazyload"></a></p><p><strong>点分十进制记法</strong></p><p><a href="/pic/network/4-6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-6.png" class="lazyload"></a></p><h4 id="222-常用的三种类别的-ip-地址"><a class="markdownIt-Anchor" href="#222-常用的三种类别的-ip-地址"></a> 2.2.2 常用的三种类别的 IP 地址</h4><p>IP 地址的使用范围</p><table><thead><tr><th style="text-align:center">网络类别</th><th style="text-align:center">最大网络数</th><th style="text-align:center">第一个可用的网络号</th><th style="text-align:center">最后一个可用的网络号</th><th style="text-align:center">每个网络中最大的主机数</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">126 (2<sup>7</sup> – 2)</td><td style="text-align:center">1</td><td style="text-align:center">126</td><td style="text-align:center">16,777,214</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">16,383(2<sup>14</sup> - 1)</td><td style="text-align:center">128.1</td><td style="text-align:center">191.255</td><td style="text-align:center">65,534</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">2,097,151 (2<sup>21</sup> - 1)</td><td style="text-align:center">192.0.1</td><td style="text-align:center">223.255.255</td><td style="text-align:center">254</td></tr></tbody></table><p><strong>IP 地址的重要特点</strong></p><ol><li>IP 地址是一种分等级的地址结构，分两个等级的好处是：<ol><li>IP 地址管理机构在分配 IP 地址时<strong>只分配网络号</strong>，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</li><li>路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li></ol></li><li>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。<ol><li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为<strong>多归属主机</strong>(multihomed host)。</li><li>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此一个路由器<strong>至少</strong>应当有两个不同的 IP 地址。</li></ol></li><li>用<strong>转发器或网桥</strong>连接起来的若干个局域网仍为一个网络，因此这些局域网都具有同样的网络号 net-id。</li><li>所有分配到网络号 net-id 的网络，范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</li></ol><p><a href="/pic/network/4-7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-7.png" class="lazyload"></a></p><ul><li>在同一个局域网上的主机或路由器的 IP 地址中的网络号必须是一样的，图中的网络号就是 IP 地址中的 net-id。</li><li>路由器总是具有两个或两个以上的 IP 地址。路由器的每一个接口都有一个不同网络号的 IP 地址。</li><li>两个路由器直接相连的接口处，可指明也可不指明 IP 地址。如指明 IP 地址，则这一段连线就构成了一种只包含一段线路的特殊“网络” 。现在常不指明 IP 地址。</li></ul><h3 id="23-ip-地址与硬件地址"><a class="markdownIt-Anchor" href="#23-ip-地址与硬件地址"></a> 2.3 IP 地址与硬件地址</h3><p><a href="/pic/network/4-8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-8.png" class="lazyload"></a></p><p>从三个不同的层次看数据的流动过程</p><p><a href="/pic/network/4-9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-9.png" class="lazyload"></a></p><p><a href="/pic/network/4-10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-10.png" class="lazyload"></a></p><p>在 IP 层抽象的互联网上只能看到 IP 数据报图中的 IP1<strong>→</strong>IP2 表示从源地址 IP1 到目的地址 IP2 两个路由器的 IP 地址并不出现在 IP 数据报的首部中。</p><p>路由器只根据目的站的 IP 地址的网络号进行路由选择。</p><p>IP层抽象的互联网屏蔽了下层很复杂的细节在抽象的网络层上讨论问题，就能够使用统一的、抽象的 IP 地址研究主机和主机或主机和路由器之间的通信。</p><p><a href="/pic/network/4-11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-11.png" class="lazyload"></a></p><p>在具体的物理网络的链路层只能看见 MAC 帧而看不见 IP 数据报。</p><h3 id="24-地址解析协议-arp-和逆地址解析协议-rarp"><a class="markdownIt-Anchor" href="#24-地址解析协议-arp-和逆地址解析协议-rarp"></a> 2.4 地址解析协议 ARP 和逆地址解析协议 RARP</h3><p><a href="/pic/network/4-12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-12.png" class="lazyload"></a></p><p>不管网络层使用的是什么协议，在实际网络的链路上传送数据帧时，最终还是必须使用硬件地址。</p><p>每一个主机都设有一个 <strong>ARP 高速缓存</strong>(ARP cache)，里面有所在的局域网上的各主机和路由器的 <strong>IP 地址到硬件地址</strong>的映射表。当主机 A 欲向本局域网上的某个主机 B 发送 IP 数据报时，就先在其 ARP 高速缓存中查看有无主机 B 的 IP 地址。如有，就可查出其对应的硬件地址，再将此硬件地址写入 MAC 帧，然后通过局域网将该 MAC 帧发往此硬件地址。</p><p><a href="/pic/network/4-13.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-13.png" class="lazyload"></a></p><p><strong>ARP 高速缓存的作用</strong>：为了减少网络上的通信量，主机 A 在发送其 ARP 请求分组时，就将自己的 IP 地址到硬件地址的映射写入 ARP 请求分组。当主机 B 收到 A 的 ARP 请求分组时，就将主机 A 的这一地址映射写入主机 B 自己的 ARP 高速缓存中。这对主机 B 以后向 A 发送数据报时就更方便了。</p><p>ARP 是解决<strong>同一个局域网</strong>上的主机或路由器的 IP 地址和硬件地址的映射问题。如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的某个路由器的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。</p><p>从IP地址到硬件地址的解析是<strong>自动进行</strong>的，主机的用户对这种地址解析过程是不知道的。只要主机或路由器要和本网络上的另一个已知 IP 地址的主机或路由器进行通信，ARP 协议就会自动地将该 IP 地址解析为链路层所需要的硬件地址。</p><p><strong>使用 ARP 的四种典型情况</strong></p><ol><li>发送方是主机，要把IP数据报发送到本网络上的另一个主机。这时用 ARP 找到目的主机的硬件地址。</li><li>发送方是主机，要把 IP 数据报发送到另一个网络上的一个主机。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。</li><li>发送方是路由器，要把 IP 数据报转发到本网络上的一个主机。这时用 ARP 找到目的主机的硬件地址。</li><li>发送方是路由器，要把 IP 数据报转发到另一个网络上的一个主机。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。</li></ol><p><strong>什么我们不直接使用硬件地址进行通信？</strong></p><p>由于全世界存在着各式各样的网络，它们使用不同的硬件地址。要使这些异构网络能够互相通信就必须进行非常复杂的硬件地址转换工作，因此几乎是不可能的事。</p><p>连接到因特网的主机都拥有统一的 IP 地址，它们之间的通信就像连接在同一个网络上那样简单方便，因为调用 ARP 来寻找某个路由器或主机的硬件地址都是由计算机软件自动进行的，对用户来说是看不见这种调用过程的。</p><p>逆地址解析协议 RARP 使只知道自己硬件地址的主机能够知道其 IP 地址。这种主机往往是无盘工作站，因此 RARP协议目前已很少使用。</p><h3 id="25-ip-数据报的格式"><a class="markdownIt-Anchor" href="#25-ip-数据报的格式"></a> 2.5 IP 数据报的格式</h3><p>一个 IP 数据报由<strong>首部</strong>和<strong>数据</strong>两部分组成。首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。在首部的固定部分的后面是一些可选字段，其长度是可变的。</p><p><a href="/pic/network/4-14.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-14.png" class="lazyload"></a></p><p><strong>版本</strong>：占 4 位，指 IP 协议的版本。目前的 IP 协议版本号为 4 (即 IPv4)</p><p><strong>首部长度</strong>：占 4 位，可表示的最大数值是 15 个单位(一个单位为 4 字节)，因此 IP 的首部长度的最大值是 60 字节。</p><p><strong>区分服务</strong>：占 8 位，用来获得更好的服务。在旧标准中叫做服务类型，但实际上一直未被使用过。1998 年这个字段改名为区分服务。只有在使用区分服务时，这个字段才起作用。在一般的情况下都不使用这个字段。</p><p><strong>总长度</strong>：占 16 位，指首部和数据之和的长度，单位为字节，因此数据报的最大长度为 65535 字节。总长度必须不超过最大传送单元 MTU。</p><p><strong>标识</strong>：占 16 位，它是一个计数器，用来产生数据报的标识。</p><p><strong>标志</strong>：占 3 位，目前只有前两位有意义。标志字段的最低位是 <strong>MF</strong> (More Fragment)。MF = 1 表示后面“还有分片”。MF = 0 表示最后一个分片。标志字段中间的一位是 <strong>DF</strong> (Don’t Fragment) 。只有当 DF = 0 时才允许分片。</p><p><strong>片偏移</strong>：占12 位，指出较长的分组在分片后某片在原分组中的相对位置。片偏移以 8 个字节为偏移单位。</p><p><a href="/pic/network/4-15.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-15.png" class="lazyload"></a></p><p><strong>生存时间</strong>：占8 位，记为 TTL (Time To Live)，数据报在网络中可通过的路由器数的最大值。</p><p><strong>协议</strong>：占8 位，字段指出此数据报携带的数据使用何种协议以便目的主机的 IP 层将数据部分上交给哪个处理过程。协议包括TCP、UDP、ICMP、IGMP、OSPF等。</p><p><strong>首部检验和</strong>：占16 位，字段只检验数据报的首部不检验数据部分。这里不采用 CRC 检验码而采用简单的计算方法。</p><p><a href="/pic/network/4-16.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-16.png" class="lazyload"></a></p><p><strong>源地址和目的地址</strong>：都各占 4 字节</p><p><strong>IP 数据报首部的可变部分</strong></p><p>IP 首部的可变部分就是一个选项字段，用来支持排错、测量以及安全等措施，内容很丰富。</p><p>选项字段的长度可变，从 1 个字节到 40 个字节不等，取决于所选择的项目。</p><p>增加首部的可变部分是为了增加 IP 数据报的功能，但这同时也使得 IP 数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销。实际上这些选项很少被使用。</p><h3 id="26-ip-层转发分组的流程"><a class="markdownIt-Anchor" href="#26-ip-层转发分组的流程"></a> 2.6 IP 层转发分组的流程</h3><p>有四个 A 类网络通过三个路由器连接在一起。每一个网络上都可能有成千上万个主机。可以想像，若按目的主机号来制作路由表，则所得出的路由表就会过于庞大。但若按主机所在的网络地址来制作路由表，那么每一个路由器中的路由表就只包含 4 个项目。这样就可使路由表大大简化。</p><p><a href="/pic/network/4-17.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-17.png" class="lazyload"></a></p><p><strong>查找路由表</strong>：根据目的网络地址就能确定下一跳路由器，这样做的结果是：</p><ul><li>IP 数据报最终一定可以找到目的主机所在目的网络上的路由器（可能要通过多次的间接交付）。</li><li>只有到达最后一个路由器时，才试图向目的主机进行直接交付。</li></ul><p><strong>特定主机路由</strong>：这种路由是为特定的目的主机指明一个路由。采用特定主机路由可使网络管理人员能更方便地控制网络和测试网络，同时也可在需要考虑某种安全问题时采用这种特定主机路由。</p><p><strong>默认路由</strong>：路由器还可采用默认路由以减少路由表所占用的空间和搜索路由表所用的时间。这种转发方式在一个网络只有很少的对外连接时是很有用的。默认路由在主机发送 IP 数据报时往往更能显示出它的好处。如果一个主机连接在一个小网络上，而这个网络只用一个路由器和因特网连接，那么在这种情况下使用默认路由是非常合适的。</p><p><a href="/pic/network/4-18.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-18.png" class="lazyload"></a></p><p>只要目的网络不是 N<sub>1</sub> 和 N<sub>2</sub>，就一律选择默认路由，把数据报先间接交付路由器 R<sub>1</sub>，让 R<sub>1</sub> 再转发给下一个路由器。</p><p>IP 数据报的首部中没有地方可以用来指明“下一跳路由器的 IP 地址”。当路由器收到待转发的数据报，不是将下一跳路由器的 IP 地址填入 IP 数据报，而是送交下层的网络接口软件。网络接口软件使用 ARP 负责将下一跳路由器的 IP 地址转换成硬件地址，并将此硬件地址放在链路层的 MAC 帧的首部，然后根据这个硬件地址找到下一跳路由器。</p><p><strong>分组转发算法</strong></p><ol><li>从数据报的首部提取目的主机的 IP 地址 <em>D</em>, 得出目的网络地址为 <em>N</em>。</li><li>若网络 <em>N</em> 与此路由器直接相连，则把数据报直接交付目的主机 <em>D</em>；否则是间接交付，执行3。</li><li>若路由表中有目的地址为 <em>D</em> 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行4。</li><li>若路由表中有到达网络 <em>N</em> 的路由，则把数据报传送给路由表指明的下一跳路由器；否则，执行5。</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行6。</li><li>报告转发分组出错。</li></ol><h2 id="3-划分子网和构造超网"><a class="markdownIt-Anchor" href="#3-划分子网和构造超网"></a> 3 划分子网和构造超网</h2><h3 id="31-划分子网"><a class="markdownIt-Anchor" href="#31-划分子网"></a> 3.1 划分子网</h3><p>在 ARPANET 的早期，IP 地址的设计确实不够合理。</p><ul><li>IP 地址空间的利用率有时很低。</li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。</li><li>两级的 IP 地址不够灵活。</li></ul><p>从 1985 年起在 IP 地址中又增加了一个“<strong>子网号字段</strong>”，使两级的 IP 地址变成为三级的 IP 地址。这种做法叫作<strong>划分子网</strong>(subnetting) 。划分子网已成为因特网的正式标准协议。</p><p><strong>划分子网的基本思路</strong></p><p>划分子网纯属一个单位内部的事情。单位对外仍然表现为没有划分子网的网络。从主机号借用若干个位作为子网号 subnet-id，而主机号 host-id 也就相应减少了若干个位。</p><pre class="highlight"><code class>IP地址 ::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}       </code></pre><p>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的目的网络号 net-id，先找到连接在本单位网络上的路由器。然后此路由器在收到 IP 数据报后，再按目的网络号 net-id 和子网号 subnet-id 找到目的子网。最后就将 IP 数据报直接交付目的主机。</p><p><a href="/pic/network/4-19.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-19.png" class="lazyload"></a></p><p>划分子网后变成了三级结构：当没有划分子网时，IP 地址是两级结构。划分子网后 IP 地址就变成了三级结构。划分子网只是把 IP 地址的主机号 host-id 这部分进行再划分，而不改变 IP 地址原来的网络号 net-id。</p><p><strong>子网掩码</strong></p><p>从一个 IP 数据报的首部并无法判断源主机或目的主机所连接的网络是否进行了子网划分。使用子网掩码(subnet mask)可以找出 IP 地址中的子网部分。</p><p><a href="/pic/network/4-20.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-20.png" class="lazyload"></a></p><p>子网掩码是一个网络或一个子网的重要属性。</p><ul><li>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。</li><li>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</li><li>若一个路由器连接在两个子网上就拥有两个网络地址和两个子网掩码。</li></ul><h3 id="32-使用子网掩码的分组转发过程"><a class="markdownIt-Anchor" href="#32-使用子网掩码的分组转发过程"></a> 3.2 使用子网掩码的分组转发过程</h3><p>在不划分子网的两级 IP 地址下，从 IP 地址得出网络地址是个很简单的事。但在划分子网的情况下，从 IP 地址却不能唯一地得出网络地址来，这是因为网络地址取决于那个网络所采用的子网掩码，但数据报的首部并没有提供子网掩码的信息。因此分组转发的算法也必须做相应的改动。</p><p><strong>在划分子网的情况下路由器转发分组的算法</strong></p><ol><li>从收到的分组的首部提取目的 IP 地址 <em>D</em>。</li><li>先用各网络的子网掩码和 <em>D</em> 逐位相“与”，看是否和相应的网络地址匹配。若匹配，则将分组直接交付。否则就是间接交付，执行(3)。</li><li>若路由表中有目的地址为 <em>D</em> 的<strong>特定主机路由</strong>，则将分组传送给指明的下一跳路由器；否则，执行(4)。</li><li>对路由表中的每一行的子网掩码和 <em>D</em> 逐位相“与”，若其结果与该行的目的网络地址匹配，则将分组传送给该行指明的下一跳路由器；否则，执行(5)。</li><li>若路由表中有一个<strong>默认路由</strong>，则将分组传送给路由表中所指明的默认路由器；否则，执行(6)。</li><li>报告转发分组出错。</li></ol><p><a href="/pic/network/4-21.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-21.png" class="lazyload"></a></p><p>已知互联网和路由器 R1 中的路由表。主机 H1 向 H2 发送分组。试讨论 R1 收到 H1 向 H2 发送的分组后查找路由表的过程。</p><ol><li>主机 H1 要发送分组给 H2，要发送的分组的目的 IP 地址：128.30.33.138。因此 H1 首先检查主机 128.30.33.138 是否连接在本网络上如果是，则直接交付；否则，就送交路由器 R1，并逐项查找路由表。</li><li>主机 H1 首先将本子网的子网掩码 255.255.255.128 与分组的 IP 地址 128.30.33.138 逐比特相“与”(AND 操作) ，发现不等于 H1 的网络地址。</li><li>因此 H1 必须把分组传送到路由器 R1然后逐项查找路由表。路由器 R1 收到分组后就用路由表中第 1 个项目的<br>子网掩码和 128.30.33.138 逐比特 AND 操作，结果与 128.30.33.0 不匹配。</li><li>路由器 R1 再用路由表中第 2 个项目的子网掩码和 128.30.33.138 逐比特 AND 操作，与 128.30.33.128 匹配，这表明子网 2 就是收到的分组所要寻找的目的网络。</li></ol><h3 id="33-无分类编址-cidr"><a class="markdownIt-Anchor" href="#33-无分类编址-cidr"></a> 3.3 无分类编址 CIDR</h3><p>划分子网在一定程度上缓解了因特网在发展中遇到的困难。然而在 1992 年因特网仍然面临三个必须尽早解决的问题，这就是：</p><ol><li>B 类地址在 1992 年已分配了近一半，眼看就要在 1994 年 3 月全部分配完毕！</li><li>因特网主干网上的路由表中的项目数急剧增长（从几千个增长到几万个）。</li><li>整个 IPv4 的地址空间最终将全部耗尽。</li></ol><p>无分类编址方法，它的正式名字是无分类域间路由选择 CIDR。</p><p>CIDR 消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，因而可以更加有效地分配 IPv4 的地址空间。CIDR使用各种长度的“<strong>网络前缀</strong>”(network-prefix)来代替分类地址中的网络号和子网号。IP 地址从三级编址（使用子网掩码）又回到了两级编址。</p><p><strong>无分类的两级编址</strong></p><p>无分类的两级编址的记法是：</p><pre class="highlight"><code class>IP地址 ::= {&lt;网络前缀&gt;, &lt;主机号&gt;}           </code></pre><p>CIDR 还使用“<strong>斜线记法</strong>”(slash notation)，它又称为CIDR记法，即在 IP 地址面加上一个斜线“/”，然后写上网络前缀所占的位数（这个数值对应于三级编址中子网掩码中 1 的个数）。</p><p>CIDR 把网络前缀都相同的连续的 IP 地址组成“<strong>CIDR 地址块</strong>”。</p><p><strong>CIDR 地址块</strong></p><p>128.14.32.0/20 表示的地址块共有 2<sup>12</sup> 个地址（因为斜线后面的 20 是网络前缀的位数，所以这个地址的主机号是 12 位）。这个地址块的起始地址是 128.14.32.0。在不需要指出地址块的起始地址时，也可将这样的地址块简称为“/20 地址块”。128.14.32.0/20 地址块的最小地址：128.14.32.0；最大地址：128.14.47.255。全 0 和全 1 的主机号地址一般不使用。</p><p><strong>路由聚合</strong></p><p>一个 CIDR 地址块可以表示很多地址，这种地址的聚合常称为<strong>路由聚合</strong>，它使得路由表中的一个项目可以表示很多个（例如上千个）原来传统分类地址的路由。路由聚合也称为<strong>构成超网</strong>(supernetting)。</p><p>CIDR 虽然不使用子网了，但仍然使用“<strong>掩码</strong>”这一名词（但不叫子网掩码）。对于 /20 地址块，它的掩码是 20 个连续的 1。 斜线记法中的数字就是掩码中1的个数。</p><p><strong>CIDR 记法的其他形式</strong></p><p>10.0.0.0/10 可简写为 10/10，也就是将点分十进制中低位连续的 0 省略。</p><p>10.0.0.0/10 相当于指出 IP 地址 10.0.0.0 的掩码是 255.192.0.0，即11111111 11000000 00000000 00000000</p><p>网络前缀的后面加一个星号 * 的表示方法，如 00001010 00*，在星号 * 之前是网络前缀，而星号 * 表示 IP 地址中的主机号，可以是任意值。</p><p><strong>构成超网</strong></p><p>前缀长度不超过 23 位的 CIDR 地址块都包含了多个 C 类地址。这些 C 类地址合起来就构成了<strong>超网</strong>。</p><p>CIDR 地址块中的地址数一定是 2 的整数次幂。网络前缀越短，其地址块所包含的地址数就越多。而在三级结构的IP地址中，划分子网是使网络前缀变长。</p><p><a href="/pic/network/4-22.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-22.png" class="lazyload"></a></p><p><strong>最长前缀匹配</strong></p><p>使用 CIDR 时，路由表中的每个项目由“<strong>网络前缀</strong>”和“<strong>下一跳地址</strong>”组成。在查找路由表时可能会得到不止一个匹配结果。 应当从匹配结果中选择具有最长网络前缀的路由：<strong>最长前缀匹配</strong>。网络前缀越长，其地址块就越小，因而路由就越具体。最长前缀匹配又称为最长匹配或最佳匹配。</p><p><strong>使用二叉线索查找路由表</strong></p><p>当路由表的项目数很大时，怎样设法减小路由表的查找时间就成为一个非常重要的问题。 为了进行更加有效的查找，通常是将无分类编址的路由表存放在一种层次的数据结构中，然后自上而下地按层次进行查找。这里最常用的就是<strong>二叉线索</strong>(binary trie)。</p><p>IP 地址中从左到右的比特值决定了从根结点逐层向下层延伸的路径，而二叉线索中的各个路径就代表路由表中存放的各个地址。为了提高二叉线索的查找速度，广泛使用了各种压缩技术。</p><p><a href="/pic/network/4-23.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/4-23.png" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络(三)：数据链路层</title>
      <link href="/2020/01/30/network-3/"/>
      <url>/2020/01/30/network-3/</url>
      
        <content type="html"><![CDATA[<h2 id="1-数据链路层的简单模型"><a class="markdownIt-Anchor" href="#1-数据链路层的简单模型"></a> 1 数据链路层的简单模型</h2><p><a href="/pic/network/3-1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-1.png" class="lazyload"></a></p><p>数据链路层使用的信道主要有以下两种类型：</p><ul><li><strong>点对点信道</strong>：这种信道使用一对一的点对点通信方式。</li><li><strong>广播信道</strong>：这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的<strong>共享信道协议</strong>来协调这些主机的数据发送。</li></ul><h2 id="2-使用点对点信道的数据链路层"><a class="markdownIt-Anchor" href="#2-使用点对点信道的数据链路层"></a> 2 使用点对点信道的数据链路层</h2><h3 id="21-数据链路和帧"><a class="markdownIt-Anchor" href="#21-数据链路和帧"></a> 2.1 数据链路和帧</h3><p><strong>链路</strong>(link)：一条无源的点到点的物理线路段，中间没有任何其他的交换结点。一条链路只是一条通路的一个组成部分。</p><p><strong>数据链路</strong>(data link)：除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</p><p>现在最常用的方法是使用适配器（即网卡）来实现这些协议的硬件和软件。一般的适配器都包括了数据链路层和物理层这两层的功能。</p><p><a href="/pic/network/3-2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-2.png" class="lazyload"></a></p><h3 id="22-三个基本问题"><a class="markdownIt-Anchor" href="#22-三个基本问题"></a> 2.2 三个基本问题</h3><h4 id="221-封装成帧"><a class="markdownIt-Anchor" href="#221-封装成帧"></a> 2.2.1 封装成帧</h4><p><a href="/pic/network/3-3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-3.png" class="lazyload"></a></p><p>封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧，确定帧的界限。</p><p>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。</p><h4 id="222-透明传输"><a class="markdownIt-Anchor" href="#222-透明传输"></a> 2.2.2 透明传输</h4><p><a href="/pic/network/3-4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-4.png" class="lazyload"></a></p><p><strong>解决透明传输问题</strong>：发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”(其十六进制编码是1B)。</p><p>字节填充(byte stuffing)或字符填充(character stuffing)——接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</p><p>如果转义字符也出现数据当中，那么应在转义字符前面插入一个转义字符。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</p><p><a href="/pic/network/3-5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-5.png" class="lazyload"></a></p><h4 id="223-差错检测"><a class="markdownIt-Anchor" href="#223-差错检测"></a> 2.2.3 差错检测</h4><p>在传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1。</p><p>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率</strong> BER (Bit Error Rate)。</p><p>误码率与信噪比有很大的关系。</p><p>为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。</p><p><strong>循环冗余检验的原理</strong></p><p>在发送端，先把数据划分为组，假定每组 <em>k</em> 个比特。假设待传送的一组数据 <em>M</em> = 101001（现在 <em>k</em> = 6）。我们在 <em>M</em> 的后面再添加供差错检测用的 <em>n</em> 位冗余码一起发送。</p><p>接收端对收到的每一帧进行 CRC 检验，若得出的余数 <em>R</em> = 0，则判定这个帧没有差错，就接受(accept)；若余数 <em>R</em> ≠ 0，则判定这个帧有差错，就丢弃。</p><p>但这种检测方法并不能确定究竟是哪一个或哪几个比特出现了差错。只要经过严格的挑选，并使用位数足够多的除数 <em>P</em>，那么出现检测不到的差错的概率就很小很小。</p><p><strong>冗余码的计算</strong></p><p>用二进制的模 2 运算进行 2<sup>n</sup> 乘 <em>M</em> 的运算，这相当于在 <em>M</em> 后面添加 <em>n</em> 个 0。</p><p>得到的 (<em>k</em> + <em>n</em>) 位的数除以事先选定好的长度为 (<em>n</em> + 1) 位的除数 <em>P</em>，得出商是 <em>Q</em> 而余数是 <em>R</em>，余数 <em>R</em> 比除数 <em>P</em> 少1 位，即 <em>R</em> 是 <em>n</em> 位。</p><p><strong>例如</strong>：现在 <em>k</em> = 6, <em>M</em> = 101001。</p><p>设 <em>n</em> = 3, 除数 <em>P</em> = 1101，</p><p>被除数是 2<sup>n</sup><em>M</em> = 101001000。</p><p>模 2 运算的结果是：商 <em>Q</em> = 110101，余数 <em>R</em> = 001。</p><p>把余数 <em>R</em> 作为冗余码添加在数据 <em>M</em> 的后面发送出去。发送的数据是：2<sup>n</sup><em>M</em> + <em>R</em> 即：101001001，共 (<em>k</em> + <em>n</em>) 位。</p><p><strong>帧检验序列 FCS</strong></p><p>在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。循环冗余检验 CRC 和帧检验序列 FCS并不等同。CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</p><p><strong>注意</strong>：仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受(accept)。“无差错接受”是指：“凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错”。也就是说：“凡是接收端数据链路层接受的帧都没有传输差错”（有差错的帧就丢弃而不接受）。要做到“可靠传输”（即发送什么就收到什么）就必须再加上确认和重传机制。</p><h2 id="3-点对点协议-ppp"><a class="markdownIt-Anchor" href="#3-点对点协议-ppp"></a> 3 点对点协议 PPP</h2><h3 id="31-ppp-协议的特点"><a class="markdownIt-Anchor" href="#31-ppp-协议的特点"></a> 3.1 PPP 协议的特点</h3><p><a href="/pic/network/3-6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-6.png" class="lazyload"></a></p><p>现在全世界使用得最多的数据链路层协议是点对点协议 PPP (Point-to-Point Protocol)。用户使用拨号电话线接入因特网时，一般都是使用 PPP 协议。</p><p>PPP 协议应满足的需求：简单(这是首要的要求)、封装成帧、透明性、多种网络层协议、多种类型链路、差错检测、检测连接状态、最大传送单元、网络层地址协商、数据压缩协商。</p><p>PPP 协议不需要的功能：纠错、流量控制、序号、多点线路、半双工或单工链路。</p><p><strong>PPP 协议的组成</strong></p><ol><li>一个将 IP 数据报封装到串行链路的方法。</li><li>链路控制协议 LCP (Link Control Protocol)。</li><li>网络控制协议 NCP (Network Control Protocol)。</li></ol><h3 id="32-ppp-协议的帧格式"><a class="markdownIt-Anchor" href="#32-ppp-协议的帧格式"></a> 3.2 PPP 协议的帧格式</h3><p><a href="/pic/network/3-7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-7.png" class="lazyload"></a></p><ul><li>标志字段 F = 0x7E。</li><li>地址字段 A 只置为 0xFF。地址字段实际上并不起作用。</li><li>控制字段 C 通常置为 0x03。</li><li>PPP 有一个 2 个字节的协议字段：当协议字段为 0x0021 时，PPP 帧的信息字段就是IP 数据报；若为 0xC021, 则信息字段是 PPP 链路控制数据；若为 0x8021，则表示这是网络控制数据。</li><li>PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节。</li></ul><p><strong>透明传输问题</strong></p><p>字符填充：用于异步传输。</p><ol><li>将信息字段中出现的每一个 0x7E 字节转变成为 2 字节序列(0x7D, 0x5E)。</li><li>若信息字段中出现一个 0x7D 的字节, 则将其转变成为 2 字节序列(0x7D, 0x5D)。</li><li>若信息字段中出现 ASCII 码的控制字符（即数值小于 0x20 的字符），则在该字符前面要加入一个 0x7D 字节，同时将该字符的编码加以改变。</li></ol><p>零比特填充：用于同步传输。</p><p>在发送端，只要发现有 5 个连续 1，则立即填入一个 0。接收端对帧中的比特流进行扫描。每当发现 5 个连续1时，就把这 5 个连续 1 后的一个 0 删除，</p><p><a href="/pic/network/3-8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-8.png" class="lazyload"></a></p><p>PPP 协议之所以<strong>不使用序号和确认机制</strong>是出于以下的考虑：</p><ol><li>在数据链路层出现差错的概率不大时，使用比较简单的 PPP 协议较为合理。</li><li>在因特网环境下，PPP 的信息字段放入的数据是 IP 数据报。数据链路层的可靠传输并不能够保证网络层的传输也是可靠的。</li><li>帧检验序列 FCS 字段可保证无差错接受。</li></ol><h3 id="33-ppp-协议的工作状态"><a class="markdownIt-Anchor" href="#33-ppp-协议的工作状态"></a> 3.3 PPP 协议的工作状态</h3><p><a href="/pic/network/3-9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-9.png" class="lazyload"></a></p><p><strong>整体的工作流程</strong>：</p><ol><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的链路控制协议 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，和进行网络层配置，网络控制协议 NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ol><h2 id="4-使用广播信道的数据链路层"><a class="markdownIt-Anchor" href="#4-使用广播信道的数据链路层"></a> 4 使用广播信道的数据链路层</h2><h3 id="41-局域网的数据链路层"><a class="markdownIt-Anchor" href="#41-局域网的数据链路层"></a> 4.1 局域网的数据链路层</h3><p>局域网最主要的特点是：网络为一个单位所拥有，且地理范围和站点数目均有限。</p><p>局域网具有如下的一些主要优点：</p><ol><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ol><p><a href="/pic/network/3-10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-10.png" class="lazyload"></a></p><p><strong>以太网的两个标准</strong>：</p><ol><li>DIX Ethernet V2 是世界上第一个局域网产品（以太网）的规约。</li><li>IEEE 的 802.3 标准。</li></ol><p>注意：DIX Ethernet V2 标准与 IEEE 的 802.3 标准只有很小的差别，因此可以将 802.3 局域网简称为“以太网”。严格说来，“以太网”应当是指符合 DIX Ethernet V2 标准的局域网</p><p><strong>数据链路层的两个子层</strong>（为了使数据链路层能更好地适应多种局域网标准，802 委员会就将局域网的数据链路层拆成两个子层）：</p><ul><li>逻辑链路控制 LLC (Logical Link Control)子层</li><li>媒体接入控制 MAC (Medium Access Control)子层。</li></ul><p>其中与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关，不管采用何种协议的局域网对 LLC 子层来说都是透明的。</p><p><a href="/pic/network/3-11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-11.png" class="lazyload"></a></p><p>以后一般不考虑 LLC 子层，由于 TCP/IP 体系经常使用的局域网是 DIX Ethernet V2 而不是 802.3 标准中的几种局域网，因此现在 802 委员会制定的逻辑链路控制子层 LLC（即 802.2 标准）的作用已经不大了。很多厂商生产的适配器上就仅装有 MAC 协议而没有 LLC 协议。</p><p><strong>适配器(网卡)</strong></p><p>适配器的重要功能：计算机通过适配器和局域网进行通信。</p><ol><li>进行串行/并行转换。</li><li>对数据进行缓存。</li><li>在计算机的操作系统安装设备驱动程序。</li><li>实现以太网协议。</li></ol><p><a href="/pic/network/3-12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-12.png" class="lazyload"></a></p><h3 id="42-csmacd-协议"><a class="markdownIt-Anchor" href="#42-csmacd-协议"></a> 4.2 CSMA/CD 协议</h3><p>最初的以太网是将许多计算机都连接到一根总线上。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p><p><a href="/pic/network/3-13.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-13.png" class="lazyload"></a></p><ol><li>总线上的每一个工作的计算机都能检测到 B 发送的数据信号。</li><li>由于只有计算机 D 的地址与数据帧首部写入的地址一致，因此只有 D 才接收这个数据帧。</li><li>其他所有的计算机（A, C 和 E）都检测到不是发送给它们的数据帧，因此就丢弃这个数据帧而不能够收下来。</li><li>具有广播特性的总线上实现了一对一的通信。</li></ol><p>为了通信的简便，以太网采取了两种重要的措施：</p><ol><li>采用较为灵活的<strong>无连接</strong>的工作方式，即不必先建立连接就可以直接发送数据。</li><li>以太网对发送的数据帧<strong>不进行编号</strong>，也<strong>不要求对方发回确认</strong>。这样做的理由是局域网信道的质量很好，因信道质量产生差错的概率是很小的。</li></ol><p><strong>以太网提供的服务</strong>：以太网提供的服务是<strong>不可靠的交付</strong>，即尽最大努力的交付。当目的站收到有差错的数据帧时就丢弃此帧，其他什么也不做，差错的纠正由高层来决定。如果高层发现丢失了一些数据而进行重传，但以太网并不知道这是一个重传的帧，而是当作一个新的数据帧来发送。</p><p>以太网发送的数据都使用曼彻斯特(Manchester)编码。</p><p><a href="/pic/network/3-14.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-14.png" class="lazyload"></a></p><p><strong>载波监听多点接入/碰撞检测 CSMA/CD</strong></p><ul><li><strong>多点接入</strong>：表示许多计算机以多点接入的方式连接在一根总线上。</li><li><strong>载波监听</strong>：指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</li><li><strong>碰撞检测</strong>：就是计算机边发送数据边检测信道上的信号电压大小。当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞；<br>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</li></ul><p><strong>电磁波在总线上的有限传播速率的影响</strong></p><p>当某个站监听到总线是空闲时，也可能总线并非真正是空闲的。 A 向 B 发出的信息，要经过一定的时间后才能传送到 B。B 若在 A 发送的信息到达 B 之前发送自己的帧(因为这时 B 的载波监听检测不到 A 所发送的信息)，则必然要在某个时间和 A 发送的帧发生碰撞。碰撞的结果是两个帧都变得无用。</p><p><a href="/pic/network/3-15.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-15.png" class="lazyload"></a></p><p><strong>重要特性</strong>：使用 CSMA/CD 协议的以太网不能进行全双工通信而只能进行半双工通信。每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。 这种发送的不确定性使整个以太网的平均通信量远小于以太网的最高数据率。</p><p><strong>争用期</strong>：最先发送数据帧的站，在发送数据帧后至多经过时间 2<em>t</em> （两倍的端到端往返时延）就可知道发送的数据帧是否遭受了碰撞。以太网的端到端往返时延 2<em>t</em> 称为争用期或碰撞窗口。经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><p><strong>争用期的长度</strong>：以太网取 51.2 ms 为争用期的长度。对于 10 Mb/s 以太网，在争用期内可发送512 bit，即 64 字节。以太网在发送数据时，若前 64 字节没有发生冲突，则后续的数据就不会发生冲突。</p><p><strong>二进制指数类型退避算法</strong>：发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能再发送数据。</p><ol><li>确定基本退避时间，一般是取为争用期 2<em>t</em>。</li><li>定义重传次数 <em>k</em> ，<em>k</em>  ≤ 10，即<em>k</em> = Min[重传次数, 10]</li><li>从整数集合[0,1,…, (2<sup><em>k</em></sup> -1)]中随机地取出一个数记为 <em>r</em>。重传所需的时延就是 <em>r</em> 倍的基本退避时间。</li><li>当重传达 16 次仍不能成功时即丢弃该帧，并向高层报告。</li></ol><p><strong>最短有效帧长</strong>：如果发生冲突，就一定是在发送的前 64 字节之内。由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于 64 字节。 以太网规定了最短有效帧长为 64 字节，凡长度小于 64 字节的帧都是由于冲突而异常中止的无效帧。</p><p><strong>强化碰撞</strong>：当发送数据的站一旦发现发生了碰撞时：</p><ol><li>立即停止发送数据；</li><li>再继续发送若干比特的人为干扰信号(jamming signal)，以便让所有用户都知道现在已经发生了碰撞。</li></ol><p><a href="/pic/network/3-16.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-16.png" class="lazyload"></a></p><h2 id="5-使用广播信道的以太网"><a class="markdownIt-Anchor" href="#5-使用广播信道的以太网"></a> 5 使用广播信道的以太网</h2><h3 id="51-使用集线器的星形拓扑"><a class="markdownIt-Anchor" href="#51-使用集线器的星形拓扑"></a> 5.1 使用集线器的星形拓扑</h3><p>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的<strong>双绞线</strong>。这种以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做<strong>集线器</strong>(hub)</p><p>不用电缆而使用无屏蔽双绞线。每个站需要用两对双绞线，分别用于发送和接收。集线器使用了大规模集成电路芯片，因此这样的硬件设备的可靠性已大大提高了。</p><p><strong>以太网在局域网中的统治地位</strong></p><ul><li>星型网 10BASE-T 的通信距离稍短，每个站到集线器的距离不超过 100 m。</li><li>这种 10 Mb/s 速率的无屏蔽双绞线星形网的出现，既降低了成本，又提高了可靠性。</li><li>10BASE-T 双绞线以太网的出现，是局域网发展史上的一个非常重要的里程碑，它为以太网在局域网中的统治地位奠定了牢固的基础。</li></ul><p><strong>集线器的特点</strong></p><p>集线器是使用电子器件来模拟实际电缆线的工作，因此整个系统仍然像一个传统的以太网那样运行。</p><p>使用集线器的以太网在逻辑上仍是一个总线网，各工作站使用的还是 CSMA/CD 协议，并共享逻辑上的总线。</p><p>集线器很像一个多接口的转发器，工作在物理层。</p><p><a href="/pic/network/3-17.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-17.png" class="lazyload"></a></p><h3 id="52-以太网的信道利用率"><a class="markdownIt-Anchor" href="#52-以太网的信道利用率"></a> 5.2 以太网的信道利用率</h3><p><a href="/pic/network/3-18.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-18.png" class="lazyload"></a></p><p>以太网的信道被占用的情况：</p><ol><li>争用期长度为 2<em>t</em>，即端到端传播时延的两倍。检测到碰撞后不发送干扰信号。</li><li>帧长为 <em>L</em> (bit)，数据发送速率为 <em>C</em> (b/s)，因而帧的发送时间为 <em>L</em>/<em>C</em> = <em>T</em><sub>0</sub> (s)。</li></ol><p>一个帧从开始发送，经可能发生的碰撞后，将再重传数次，到发送成功且信道转为空闲(即再经过时间 <em>t</em> 使得信道上无信号在传播)时为止，是发送一帧所需的平均时间。</p><p><strong>参数 <em>a</em></strong></p><p>要提高以太网的信道利用率，就必须减小 <em>t</em> 与 <em>T</em><sub>0</sub> 之比。在以太网中定义了参数 <em>a</em>，它是以太网单程端到端时延 <em>t</em> 与帧的发送时间 <em>T</em><sub>0</sub> 之比：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mfrac><mi>τ</mi><msub><mi>T</mi><mn>0</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">a=\frac{\tau }{T_{0}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9435600000000002em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.1132em;">τ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li><p><em>a</em>→0 表示一发生碰撞就立即可以检测出来，并立即停止发送，因而信道利用率很高。</p></li><li><p><em>a</em> 越大，表明争用期所占的比例增大，每发生一次碰撞就浪费许多信道资源，使得信道利用率明显降低。</p></li><li><p>当数据率一定时，以太网的连线的长度受到限制，否则 <em>t</em> 的数值会太大。</p></li><li><p>以太网的帧长不能太短，否则 <em>T</em><sub>0</sub> 的值会太小，使 <em>a</em> 值太大。</p></li></ul><p><strong>信道利用率的最大值 <em>S</em><sub>max</sub></strong></p><p>在理想化的情况下，以太网上的各站发送数据都不会产生碰撞（这显然已经不是 CSMA/CD，而是需要使用一种特殊的调度方法），即总线一旦空闲就有某一个站立即发送数据。</p><p>发送一帧占用线路的时间是 <em>T</em><sub>0</sub> + <em>t</em>，而帧本身的发送时间是 <em>T</em><sub>0</sub>。于是我们可计算出理想情况下的极限信道利用率 <em>S</em><sub>max</sub>为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mfrac><msub><mi>T</mi><mn>0</mn></msub><mrow><msub><mi>T</mi><mn>0</mn></msub><mo>+</mo><mi>t</mi></mrow></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_{max}=\frac{T_{0}}{T_{0}+t}=\frac{1}{1+a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.09077em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="6-以太网的-mac-层"><a class="markdownIt-Anchor" href="#6-以太网的-mac-层"></a> 6 以太网的 MAC 层</h2><h3 id="61-mac-层的硬件地址"><a class="markdownIt-Anchor" href="#61-mac-层的硬件地址"></a> 6.1 MAC 层的硬件地址</h3><p>在局域网中，硬件地址又称为物理地址，或 MAC 地址。</p><p>IEEE 的注册管理机构 RA 负责向厂家分配地址字段的前三个字节(即高位 24 位)。地址字段中的后三个字节(即低位 24 位)由厂家自行指派，称为扩展标识符，必须保证生产出的适配器没有重复地址。一个地址块可以生成2<sup>24</sup>个不同的地址。这种 48 位地址称为 MAC-48，它的通用名称是EUI-48。“MAC地址”实际上就是适配器地址或适配器标识符EUI-48。</p><p><strong>适配器检查 MAC 地址</strong></p><p>适配器从网络上每收到一个 MAC 帧就首先用硬件检查 MAC 帧中的 MAC 地址。</p><p>如果是发往本站的帧则收下，然后再进行其他的处理；否则就将此帧丢弃，不再进行其他的处理。</p><p>“发往本站的帧”包括以下三种帧： 单播帧（一对一）、广播帧（一对全体）、多播帧（一对多）。</p><h3 id="62-mac-帧的格式"><a class="markdownIt-Anchor" href="#62-mac-帧的格式"></a> 6.2 MAC 帧的格式</h3><p><a href="/pic/network/3-19.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-19.png" class="lazyload"></a></p><ul><li>为了达到比特同步，在传输媒体上实际传送的要比 MAC 帧还多 8 个字节。在帧的前面插入的 8 字节中的第一个字段共 7 个字节，是前同步码，用来迅速实现 MAC 帧的比特同步。第二个字段是帧开始定界符，表示后面的信息就是MAC 帧。</li><li>类型字段用来标志上一层使用的是什么协议，以便把收到的 MAC 帧的数据上交给上一层的这个协议。</li><li>数据字段的正式名称是 MAC 客户数据字段，最小长度 64 字节 - 18 字节的首部和尾部 = 数据字段的最小长度。</li><li>当传输媒体的误码率为 1x10<sup>-8</sup> 时，MAC 子层可使未检测到的差错小于 1x10<sup>-14</sup>。</li><li>当数据字段的长度小于 46 字节时，应在数据字段的后面加入整数字节的填充字段，以保证以太网的 MAC 帧长不小于 64 字节。</li></ul><p><strong>无效的 MAC 帧</strong></p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li><li>对于检查出的无效 MAC 帧就简单地丢弃。以太网不负责重传丢弃的帧。</li></ul><p><strong>帧间最小间隔</strong></p><p>帧间最小间隔为 9.6 ms，相当于 96 bit 的发送时间。一个站在检测到总线开始空闲后，还要等待 9.6 ms 才能再次发送数据。这样做是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</p><h2 id="7-扩展的局域网"><a class="markdownIt-Anchor" href="#7-扩展的局域网"></a> 7 扩展的局域网</h2><h3 id="71-在物理层扩展局域网"><a class="markdownIt-Anchor" href="#71-在物理层扩展局域网"></a> 7.1 在物理层扩展局域网</h3><p>用多个集线器可连成更大的局域网，且用集线器组成更大的局域网都在一个碰撞域中。</p><p>碰撞域：在同一个冲突域中的每一个节点都能收到所有被发送的帧。简单的说就是同一时间内只能有一台设备发送信息的范围。</p><p><a href="/pic/network/3-20.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-20.png" class="lazyload"></a></p><p><strong>用集线器扩展局域网的优缺点</strong></p><p>优点：使原来属于不同碰撞域的局域网上的计算机能够进行跨碰撞域的通信；扩大了局域网覆盖的地理范围。</p><p>缺点：碰撞域增大了，但总的吞吐量并未提高；如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</p><h3 id="72-在数据链路层扩展局域网"><a class="markdownIt-Anchor" href="#72-在数据链路层扩展局域网"></a> 7.2 在数据链路层扩展局域网</h3><p>在数据链路层扩展局域网是使用<strong>网桥</strong>。</p><p>网桥工作在数据链路层，它根据 MAC 帧的目的地址对收到的帧进行转发。</p><p>网桥具有过滤帧的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的 MAC 地址，然后再确定将该帧转发到哪一个接口。</p><p>网桥使各网段成为隔离开的碰撞域。</p><p><a href="/pic/network/3-21.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-21.png" class="lazyload"></a></p><p>使用网桥带来的好处：</p><ul><li>过滤通信量；</li><li>扩大了物理范围；</li><li>提高了可靠性；</li><li>可互连不同物理层、不同 MAC 子层和不同速率（如10 Mb/s 和 100 Mb/s 以太网）的局域网。</li></ul><p>使用网桥带来的缺点：</p><ul><li><p>存储转发增加了时延。</p></li><li><p>在 MAC 子层并没有流量控制功能。</p></li><li><p>具有不同 MAC 子层的网段桥接在一起时时延更大。</p></li><li><p>网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。</p></li></ul><p><a href="/pic/network/3-22.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-22.png" class="lazyload"></a></p><p>网桥和集线器的不同：集线器在转发帧时，不对传输媒体进行检测；网桥在转发帧之前必须执行 CSMA/CD 算法，若在发送过程中出现碰撞，就必须停止发送和进行退避。</p><p><strong>透明网桥</strong></p><p>目前使用得最多的网桥是透明网桥(transparent bridge)。</p><p>“透明”是指局域网上的站点并不知道所发送的帧将经过哪几个网桥，因为网桥对各站来说是看不见的。</p><p>透明网桥是一种即插即用设备，其标准是 IEEE 802.1D。</p><p><strong>网桥应当按照以下自学习算法处理收到的帧和建立转发表</strong></p><ol><li>若从 A 发出的帧从接口 x 进入了某网桥，那么从这个接口出发沿相反方向一定可把一个帧传送到 A。</li><li>网桥每收到一个帧，就记下其源地址和进入网桥的接口，作为转发表中的一个项目。</li><li>在建立转发表时是把帧首部中的源地址写在“地址”这一栏的下面。</li><li>在转发帧时，则是根据收到的帧首部中的目的地址来转发的。这时就把在“地址”栏下面已经记下的源地址当作目的地址，而把记下的进入接口当作转发接口。</li></ol><p><a href="/pic/network/3-23.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-23.png" class="lazyload"></a></p><p>网桥在转发表中登记以下三个信息：除了<strong>地址</strong>和<strong>接口</strong>外，还有<strong>帧进入该网桥的时间</strong>。</p><p>这是因为以太网的拓扑可能经常会发生变化，站点也可能会更换适配器（这就改变了站点的地址）。另外，以太网上的工作站并非总是接通电源的。把每个帧到达网桥的时间登记下来，就可以在转发表中只保留网络拓扑的最新状态信息。这样就使得网桥中的转发表能反映当前网络的最新拓扑状态。</p><p><strong>网桥的自学习和转发帧的步骤归纳</strong></p><ol><li>网桥收到一帧后先进行自学习。查找转发表中与收到帧的源地址有无相匹配的项目。如没有，就在转发表中增加一个项目（源地址、进入的接口和时间）。如有，则把原有的项目进行更新。</li><li>转发帧。查找转发表中与收到帧的目的地址有无相匹配的项目。<ol><li>如没有，则通过所有其他接口（但进入网桥的接口除外）按进行转发。</li><li>如有，则按转发表中给出的接口进行转发。</li><li>若转发表中给出的接口就是该帧进入网桥的接口，则应丢弃这个帧（因为这时不需要经过网桥进行转发）。</li></ol></li></ol><p><strong>透明网桥使用了生成树算法</strong></p><p>这是为了避免产生转发的帧在网络中不断地兜圈子。</p><p><a href="/pic/network/3-24.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-24.png" class="lazyload"></a></p><p>互连在一起的网桥在进行彼此通信后，就能找出原来的网络拓扑的一个子集。在这个子集里，整个连通的网络中不存在回路，即在任何两个站之间只有一条路径。为了避免产生转发的帧在网络中不断地兜圈子。为了得出能够反映网络拓扑发生变化时的生成树，在生成树上的根网桥每隔一段时间还要对生成树的拓扑进行更新。</p><p><strong>源路由网桥</strong></p><p>透明网桥容易安装，但网络资源的利用不充分。源路由(source route)网桥在发送帧时将详细的路由信息放在帧的首部中。源站以广播方式向欲通信的目的站发送一个发现帧，每个发现帧都记录所经过的路由。发现帧到达目的站时就沿各自的路由返回源站。源站在得知这些路由后，从所有可能的路由中选择出一个最佳路由。凡从该源站向该目的站发送的帧的首部，都必须携带源站所确定的这一路由信息。</p><p><strong>多接口网桥——以太网交换机</strong></p><p>1990 年问世的交换式集线器(switching hub)，可明显地提高局域网的性能。交换式集线器常称为<strong>以太网交换机</strong>(switch)或第二层交换机（表明此交换机工作在数据链路层）。以太网交换机通常都有十几个接口，因此，以太网交换机实质上就是一个<strong>多接口的网桥</strong>，可见交换机工作在数据链路层。</p><p>以太网交换机的特点：</p><ul><li>以太网交换机的每个接口都直接与主机相连，并且一般都工作在<strong>全双工方式</strong>。</li><li>交换机能同时连通许多对的接口，使每一对相互通信的主机都能像独占通信媒体那样，进行无碰撞地传输数据。</li><li>以太网交换机由于使用了专用的交换结构芯片，其交换速率就较高。</li></ul><p>用以太网交换机扩展局域网</p><p><a href="/pic/network/3-25.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-25.png" class="lazyload"></a></p><p>利用以太网交换机可以很方便地实现<strong>虚拟局域网</strong>。</p><p>虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组。这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网</p><p><a href="/pic/network/3-26.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/3-26.png" class="lazyload"></a></p><p>虚拟局域网协议允许在以太网的帧格式中插入一个 4 字节的标识符，称为 VLAN 标记(tag)，用来指明发送该帧的工作站属于哪一个虚拟局域网。</p><p>虚拟局域网限制了接收广播信息的工作站数，使得网络不会因传播过多的广播信息(即“广播风暴”)而引起性能恶化。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络(二)：物理层</title>
      <link href="/2020/01/28/network-2/"/>
      <url>/2020/01/28/network-2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-物理层的基本概念"><a class="markdownIt-Anchor" href="#1-物理层的基本概念"></a> 1 物理层的基本概念</h2><p>物理层的主要任务描述为确定与传输媒体的接口的一些特性，即：</p><ul><li><strong>机械特性</strong>：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。</li><li><strong>电气特性</strong>：指明在接口电缆的各条线上出现的电压的范围。</li><li><strong>功能特性</strong>：指明某条线上出现的某一电平的电压表示何种意义。</li><li><strong>过程特性</strong>：指明对于不同功能的各种可能事件的出现顺序。</li></ul><h2 id="2-数据通信的基础知识"><a class="markdownIt-Anchor" href="#2-数据通信的基础知识"></a> 2 数据通信的基础知识</h2><h3 id="21-数据通信系统的模型"><a class="markdownIt-Anchor" href="#21-数据通信系统的模型"></a> 2.1 数据通信系统的模型</h3><p><a href="/pic/network/2-1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-1.png" class="lazyload"></a></p><p>相关的术语：</p><ul><li><strong>数据</strong>(data)——运送消息的实体。</li><li><strong>信号</strong>(signal)——数据的电气的或电磁的表现。</li><li>“<strong>模拟的</strong>”(analogous)——代表消息的参数的取值是连续的。</li><li>“<strong>数字的</strong>”(digital)——代表消息的参数的取值是离散的。</li><li><strong>码元</strong>(code)——在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</li></ul><h3 id="22-有关信号的几个基本概念"><a class="markdownIt-Anchor" href="#22-有关信号的几个基本概念"></a> 2.2 有关信号的几个基本概念</h3><p>（1）数据传输方式：</p><ul><li><strong>单向通信</strong>（单工通信）——只能有一个方向的通信而没有反方向的交互。</li><li><strong>双向交替通信</strong>（半双工通信）——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li><li><strong>双向同时通信</strong>（全双工通信）——通信的双方可以同时发送和接收信息。</li></ul><p>（2）信号种类：</p><ul><li><strong>基带信号</strong>（基本频带信号）——来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</li><li><strong>带通信号</strong>——把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道）。</li></ul><p>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行调制(modulation)。</p><p>（3）调制方法</p><ul><li><strong>调幅</strong>(AM)：载波的<strong>振幅</strong>随基带数字信号而变化。</li><li><strong>调频</strong>(FM)：载波的<strong>频率</strong>随基带数字信号而变化。</li><li><strong>调相</strong>(PM) ：载波的<strong>初始相位</strong>随基带数字信号而变化。</li></ul><p><a href="/pic/network/2-2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-2.png" class="lazyload"></a></p><h3 id="23-信道的极限容量"><a class="markdownIt-Anchor" href="#23-信道的极限容量"></a> 2.3 信道的极限容量</h3><p>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。</p><p>码元传输的速率越高，或信号传输的距离越远，在信道的输出端的波形的失真就越严重。</p><p><strong>奈氏准则</strong>：在假定的理想条件下，为了避免码间串扰，码元的传输速率的上限值。</p><ol><li>在任何信道中，码元传输的速率是有上限的，否则就会出现码间串扰的问题，使接收端对码元的判决（即识别）成为不可能。</li><li>如果信道的频带越宽，也就是能够通过的信号高频分量越多，那么就可以用更高的速率传送码元而不出现码间串扰。</li></ol><p><strong>香农公式</strong>：表示带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率（b/s）。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mi>W</mi><msup><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub></mrow><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mi>S</mi><mi>N</mi></mfrac><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">C=W{log_{2}}^{(1+\frac{S}{N})}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2522449999999998em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0578049999999999em;"><span style="top:-3.44734em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中<em>W</em> 为信道的带宽（以 Hz 为单位），<em>S</em> 为信道内所传信号的平均功率，<em>N</em> 为信道内部的高斯噪声功率。</p><ul><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。</li><li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。</li><li>若信道带宽 <em>W</em> 或信噪比 <em>S</em>/<em>N</em> 没有上限（当然实际信道不可能是这样的），则信道的极限信息传输速率 <em>C</em> 也就没有上限。</li><li>实际信道上能够达到的信息传输速率要比香农的极限传输速率低不少。</li><li>对于频带宽度已确定的信道，如果信噪比不能再提高了，并且码元传输速率也达到了上限值，那么还有办法提高信息的传输速率。这就是用<strong>编码</strong>的方法让每一个码元携带更多比特的信息量。</li></ul><h2 id="3-物理层下面的传输媒体"><a class="markdownIt-Anchor" href="#3-物理层下面的传输媒体"></a> 3 物理层下面的传输媒体</h2><p><a href="/pic/network/2-3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-3.png" class="lazyload"></a></p><ul><li>导向传输媒体：双绞线、同轴电缆、光缆；</li><li>非导向传输媒体：无线传输、短波通信、微波；</li></ul><h2 id="4-信道复用技术"><a class="markdownIt-Anchor" href="#4-信道复用技术"></a> 4 信道复用技术</h2><p>复用(multiplexing)是通信技术中的基本概念。</p><p><a href="/pic/network/2-4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-4.png" class="lazyload"></a></p><h3 id="41-频分复用-fdm"><a class="markdownIt-Anchor" href="#41-频分复用-fdm"></a> 4.1 频分复用 FDM</h3><p><a href="/pic/network/2-5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-5.png" class="lazyload"></a></p><p>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p><p>频分复用的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</p><h3 id="42-时分复用-tdm"><a class="markdownIt-Anchor" href="#42-时分复用-tdm"></a> 4.2 时分复用 TDM</h3><p><a href="/pic/network/2-6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-6.png" class="lazyload"></a></p><p>时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧），每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</p><p>每一个用户所占用的时隙是周期性地出现（其周期就是 TDM 帧的长度）。</p><p>TDM 信号也称为等时(isochronous)信号。</p><p>时分复用的所有用户是在不同的时间占用同样的频带宽度。</p><p><a href="/pic/network/2-7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-7.png" class="lazyload"></a></p><p>时分复用可能会造成线路资源的浪费，使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。</p><h3 id="43-统计时分复用-stdm"><a class="markdownIt-Anchor" href="#43-统计时分复用-stdm"></a> 4.3 统计时分复用 STDM</h3><p><a href="/pic/network/2-8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-8.png" class="lazyload"></a></p><p>把公共信道的时隙实行“按需分配”，即只对那些需要传送信息或正在工作的终端才分配给时隙，这样就使所有的时隙都能饱满地得到使用，可以使服务的终端数大于时隙的个数，提高了媒质的利用率，从而起到了“复用”的作用。</p><h3 id="44-波分复用-wdm"><a class="markdownIt-Anchor" href="#44-波分复用-wdm"></a> 4.4 波分复用 WDM</h3><p><a href="/pic/network/2-9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-9.png" class="lazyload"></a></p><p>波分复用就是光的频分复用。</p><h3 id="45-码分复用-cdm"><a class="markdownIt-Anchor" href="#45-码分复用-cdm"></a> 4.5 码分复用 CDM</h3><p>常用的名词是<strong>码分多址</strong>CDMA(Code Division Multiple Access)。各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</p><ul><li>每一个比特时间划分为 <em>m</em> 个短的间隔，称为<strong>码片</strong>(chip)。</li><li>每个站被指派一个唯一的 <em>m</em> bit 码片序列。<ul><li>如发送比特 1，则发送自己的 <em>m</em> bit 码片序列。</li><li>如发送比特 0，则发送该码片序列的二进制反码。</li></ul></li><li>每个站分配的码片序列不仅必须各不相同，并且还必须互相<strong>正交</strong>(orthogonal)。两个不同站的码片序列正交，就是向量 S 和 T 的规格化内积(inner product)都是 0：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>⋅</mo><mi>T</mi><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msub><mi>S</mi><mi>i</mi></msub><msub><mi>T</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">S\cdot T=\frac{1}{m}\sum_{i=1}^{m}S_{i}T_{i}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><ul><li>任何一个码片向量和该码片向量自己的规格化内积都是1；一个码片向量和该码片反码的向量的规格化内积值是 –1。</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>⋅</mo><mi>S</mi><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msub><mi>S</mi><mi>i</mi></msub><msub><mi>S</mi><mi>i</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msubsup><mi>S</mi><mi>i</mi><mn>2</mn></msubsup><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mo stretchy="false">(</mo><mo>±</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">S\cdot S=\frac{1}{m}\sum_{i=1}^{m}S_{i}S_{i}=\frac{1}{m}\sum_{i=1}^{m}S_{i}^{2}=\frac{1}{m}\sum_{i=1}^{m}(\pm 1)^{2}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">±</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p><a href="/pic/network/2-10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/2-10.png" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络(一)：计算机网络概述</title>
      <link href="/2020/01/21/network-1/"/>
      <url>/2020/01/21/network-1/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机网络在信息时代中的作用"><a class="markdownIt-Anchor" href="#计算机网络在信息时代中的作用"></a> 计算机网络在信息时代中的作用</h2><p>21世纪的重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。</p><p>网络是指”三网“，即电信网络、有线电视网络和计算机网络。</p><p>计算机网络向用户提供的最重要的功能：</p><ul><li><strong>连通性</strong>：计算机网络使上网用户之间都可以交换信息，好像这些用户的计算机都可以彼此直接连通一样。</li><li><strong>共享性</strong>：即资源共享。可以是信息共享、软件共享，也可以是硬件共享。</li></ul><h2 id="因特网概述"><a class="markdownIt-Anchor" href="#因特网概述"></a> 因特网概述</h2><p>首先区分三个概念：</p><ul><li><strong>网络</strong>(network)：许多计算机连接在一起；</li><li><strong>互联网</strong>(internet)：许多网络连接在一起；</li><li><strong>因特网</strong>(Internet)：全球最大的一个互联网；</li></ul><p><a href="/pic/network/1-1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-1.png" class="lazyload"></a></p><p>因特网发展的三个阶段：</p><p>第一阶段是从单个网络 ARPANET 向互联网发展的过程。1983 年 TCP/IP 协议成为 ARPANET 上的标准协议，人们把 1983 年作为因特网的诞生时间。</p><p>第二阶段的特点是建成了三级结构的因特网。三级计算机网络分为主干网、地区网和校园网（或企业网）。</p><p>第三阶段的特点是逐渐形成了多层次 ISP 结构的因特网。出现了因特网服务提供者 ISP (Internet Service Provider)。 根据提供服务的覆盖面积大小以及所拥有的 IP 地址数目的不同，ISP 也分成为不同的层次。</p><p><a href="/pic/network/1-2.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-2.png" class="lazyload"></a></p><p>制订因特网的正式标准的四个阶段：</p><ol><li>因特网草案(Internet Draft) ——在这个阶段还不是 RFC 文档。</li><li>建议标准(Proposed Standard) ——从这个阶段开始就成为 RFC 文档。</li><li>草案标准(Draft Standard)</li><li>因特网标准(Internet Standard)</li></ol><p><a href="/pic/network/1-3.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-3.png" class="lazyload"></a></p><h2 id="因特网的组成"><a class="markdownIt-Anchor" href="#因特网的组成"></a> 因特网的组成</h2><p>从因特网的工作方式上看，可以划分两部分：</p><ul><li><strong>边缘部分</strong>：由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。</li><li><strong>核心部分</strong>：由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。</li></ul><p><a href="/pic/network/1-4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-4.png" class="lazyload"></a></p><h3 id="1-因特网的边缘部分"><a class="markdownIt-Anchor" href="#1-因特网的边缘部分"></a> 1 因特网的边缘部分</h3><p>处在因特网边缘的部分就是连接在因特网上的所有的主机，这些主机又称为端系统(end system)。</p><p>在网络边缘的端系统中运行的程序之间的通信方式通常可划分为两大类：</p><ul><li><strong>客户服务器方式</strong>（C/S 方式），即Client/Server方式</li><li><strong>对等方式</strong>（P2P 方式），即 Peer-to-Peer方式</li></ul><p><a href="/pic/network/1-5.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-5.png" class="lazyload"></a></p><p><strong>客户服务器方式</strong></p><p>客户(client)和服务器(server)都是指通信中所涉及的两个应用进程。客户服务器方式所描述的是进程之间服务和被服务的关系。客户是服务的请求方，服务器是服务的提供方。</p><p><strong>客户软件</strong>的特点：被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务），因此客户程序必须知道服务器程序的地址；不需要特殊的硬件和很复杂的操作系统。</p><p><strong>服务器软件</strong>的特点：一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求；系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求，因此服务器程序不需要知道客户程序的地址；一般需要强大的硬件和高级的操作系统支持。</p><p><strong>对等连接方式</strong></p><p>对等连接(peer-to-peer，简写为P2P)是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。只要两个主机都运行了对等连接软件（P2P 软件），它们就可以进行平等的、对等连接通信。双方都可以下载对方已经存储在硬盘中的共享文档。</p><p><strong>对等连接方式的特点</strong>：对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又同时是服务器。例如主机 C 请求 D 的服务时，C 是客户，D 是服务器。但如果 C 又同时向 F 提供服务，那么 C 又同时起着服务器的作用。</p><h3 id="2-因特网的核心部分"><a class="markdownIt-Anchor" href="#2-因特网的核心部分"></a> 2 因特网的核心部分</h3><p>网络核心部分是因特网中最复杂的部分，网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</p><p>在网络核心部分起特殊作用的是路由器(router)。路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。</p><p><strong>数据交换方式</strong></p><p><strong>(一) 电路交换(Circuit Switching)</strong></p><p>最主要的应用就是电话网络，电路交换必定是面向连接的；电路交换适合于数据量很大的实时性传输；核心路由器之间可以使用电路交换。</p><p>电路交换的三个阶段：</p><ol><li>建立连接（申请占用通信资源）</li><li>通信（一直占用通信资源）</li><li>释放连接（释放通信资源）</li></ol><p>为什么不能用电路交换方式传输计算机的数据？</p><p>计算机数据具有突发性，这导致通信线路的利用率很低。</p><p><strong>(二) 报文交换(Message Switching)</strong></p><p>在 20 世纪 40 年代，电报通信也采用了基于存储转发原理的报文交换(message switching)。 报文交换的时延较长，从几分钟到几小时不等。现在报文交换已经很少有人使用了。</p><p>报文交换的特点：</p><ul><li>报文一般比分组长的多</li><li>报文交换的时延较长</li></ul><p><strong>(三) 分组交换(Packet Switching)</strong></p><p><strong>分组交换的过程</strong>：</p><ol><li>在发送端，先把较长的报文划分成较短的、固定长度的数据段。</li><li>每一个数据段前面添加上首部构成分组。</li><li>分组交换网以“分组”作为数据传输单元，依次把各分组发送到接收端。</li><li>接收端收到分组后剥去首部还原成报文。</li><li>最后，在接收端把收到的数据恢复成为原来的报文。</li></ol><p><strong>分组首部的重要性</strong></p><ul><li>每一个分组的首部都含有地址等控制信息。</li><li>分组交换网中的结点交换机根据收到的分组的首部中的地址信息，把分组转发到下一个结点交换机。</li><li>用这样的存储转发方式，最后分组就能到达最终目的地。</li></ul><p><strong>路由器的存储转发</strong></p><p>在路由器中的输入和输出端口之间没有直接连线，路由器处理分组的过程是：</p><ol><li>把收到的分组先放入缓存（暂时存储）；</li><li>查找转发表，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的端口转发出去。</li></ol><p><a href="/pic/network/1-6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-6.png" class="lazyload"></a></p><p><strong>主机和路由器的作用不同</strong></p><ul><li>主机是为用户进行信息处理的，并向网络发送分组，从网络接收分组。</li><li>路由器对分组进行存储转发，最后把分组交付目的主机。</li></ul><p>分组交换的优点</p><ul><li><strong>高效</strong>：动态分配传输带宽，对通信链路是逐段占用。</li><li><strong>灵活</strong>：以分组为传送单位和查找路由。</li><li><strong>迅速</strong>：不必先建立连接就能向其他主机发送分组。</li><li><strong>可靠</strong>：保证可靠性的网络协议；分布式的路由选择协议使网络有很好的生存性。</li></ul><p>分组交换的缺点</p><ul><li><strong>时延</strong>：分组在各结点存储转发时需要排队，这就会造成一定的时延。</li><li><strong>开销</strong>：分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。</li></ul><p><strong>三种交换方式的比较</strong></p><p><a href="/pic/network/1-7.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-7.png" class="lazyload"></a></p><p><strong>总结</strong>：</p><ul><li>因特网的核心部分是由许多网络和把它们互连起来的路由器组成，而主机处在因特网的边缘部分。</li><li>在因特网核心部分的路由器之间一般都用高速链路相连接，而在网络边缘的主机接入到核心部分则通常以相对较低速率的链路相连接。</li><li>主机的用途是为用户进行信息处理的，并且可以和其他主机通过网络交换信息。路由器的用途则是用来转发分组的，即进行分组交换的。</li></ul><p><strong>计算机网络的发展</strong></p><p><a href="/pic/network/1-8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-8.png" class="lazyload"></a></p><ul><li>早期的面向终端的计算机网络是以单个主机为中心的星形网，各终端通过通信线路共享昂贵的中心主机的硬件和软件资源。</li><li>分组交换网则是以网络为中心，主机都处在网络的外围，用户通过分组交换网可共享连接在网络上的许多硬件和各种丰富的软件资源。</li></ul><p>新型网络的特点：</p><ul><li>网络用于计算机之间的数据传送，而不是为了打电话。</li><li>网络能够连接不同类型的计算机，不局限于单一类型的计算机。</li><li>所有的网络结点都同等重要，因而大大提高网络的生存性。</li><li>计算机在进行通信时，必须有冗余的路由。</li><li>网络的结构应当尽可能地简单，同时还能够非常可靠地传送数据。</li></ul><h2 id="计算机网络的分类"><a class="markdownIt-Anchor" href="#计算机网络的分类"></a> 计算机网络的分类</h2><p>从不同维度上可以对网络进行不同的划分：</p><ul><li>按照作用范围：广域网、城域网、局域网、个人区域网；</li><li>按照使用者：公用网、专用网；</li><li>按照拓扑结构：总线型、环型、星型、树型、网状；</li><li>按照交换方式：电路交换网、报文交换网、分组交换网；</li><li>按照工作方式：资源子网、通信子网、接入网；</li></ul><h2 id="计算机网络的性能"><a class="markdownIt-Anchor" href="#计算机网络的性能"></a> 计算机网络的性能</h2><p><strong>1. 速率</strong></p><p>速率即数据率(data rate)或比特率(bit rate)是计算机网络中最重要的一个性能指标。指连接在计算机网络上的主机在数字信道上传送数据位数的速率。单位是 b/s、kb/s、Mb/s、Gb/s 等，速率往往是指额定速率或标称速率。</p><p><strong>比特</strong>（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。Bit 来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。</p><p><strong>2. 带宽</strong></p><p>带宽是数据通信领域中，数字信道所传送的最高数据率。单位是 b/s、kb/s、Mb/s、Gb/s 等。</p><p><strong>3. 吞吐量</strong></p><p>吞吐量(throughput)表示在单位时间内通过某个网络（或信道、接口）的数据量。</p><p>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络；吞吐量受网络的带宽或网络的额定速率的限制。</p><p><strong>4. 时延</strong></p><p><strong>传输时延</strong>（发送时延）：发送数据时，数据块从结点进入到传输媒体所需要的时间。</p><p>也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">发</mi><mi mathvariant="normal">送</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">数</mi><mi mathvariant="normal">据</mi><mi mathvariant="normal">块</mi><mi mathvariant="normal">长</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">（</mi><mi mathvariant="normal">比</mi><mi mathvariant="normal">特</mi><mi mathvariant="normal">）</mi></mrow><mrow><mi mathvariant="normal">信</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">带</mi><mi mathvariant="normal">宽</mi><mi mathvariant="normal">（</mi><mi mathvariant="normal">比</mi><mi mathvariant="normal">特</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">秒</mi><mi mathvariant="normal">）</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">发送时延 = \frac{数据块长度（比特）}{信道带宽（比特/秒）}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">送</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.613em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">道</span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">特</span><span class="mord">/</span><span class="mord cjk_fallback">秒</span><span class="mord cjk_fallback">）</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">据</span><span class="mord cjk_fallback">块</span><span class="mord cjk_fallback">长</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">特</span><span class="mord cjk_fallback">）</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>传播时延</strong>：电磁波在信道中需要传播一定的距离而花费的时间。</p><p>信号传输速率（即发送速率）和信号在信道上的传播速率是完全不同的概念。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">信</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">长</mi><mi mathvariant="normal">度</mi><mi mathvariant="normal">（</mi><mi mathvariant="normal">米</mi><mi mathvariant="normal">）</mi></mrow><mrow><mi mathvariant="normal">信</mi><mi mathvariant="normal">号</mi><mi mathvariant="normal">在</mi><mi mathvariant="normal">信</mi><mi mathvariant="normal">道</mi><mi mathvariant="normal">上</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">率</mi><mi mathvariant="normal">（</mi><mi mathvariant="normal">米</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">秒</mi><mi mathvariant="normal">）</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">传播时延 = \frac{信道长度（米）}{信号在信道上的传播速率（米/秒）}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.613em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">道</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">率</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">米</span><span class="mord">/</span><span class="mord cjk_fallback">秒</span><span class="mord cjk_fallback">）</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">信</span><span class="mord cjk_fallback">道</span><span class="mord cjk_fallback">长</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">（</span><span class="mord cjk_fallback">米</span><span class="mord cjk_fallback">）</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>处理时延</strong>：交换结点为存储转发而进行一些必要的处理所花费的时间。</p><p><strong>排队时延</strong>：结点缓存队列中分组排队所经历的时延，排队时延的长短往往取决于网络中当时的通信量。</p><p>数据经历的总时延就是发送时延、传播时延、处理时延和排队时延之和：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">总</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi><mo>=</mo><mi mathvariant="normal">发</mi><mi mathvariant="normal">送</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi><mo>+</mo><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi><mo>+</mo><mi mathvariant="normal">处</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi><mo>+</mo><mi mathvariant="normal">处</mi><mi mathvariant="normal">理</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi></mrow><annotation encoding="application/x-tex">总时延 = 发送时延+传播时延+处理时延+处理时延</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">送</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">处</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">处</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span></span></span></span></span></p><p><a href="/pic/network/1-9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-9.png" class="lazyload"></a></p><p>注意：</p><ul><li>对于高速网络链路，我们提高的仅仅是数据的发送速率而不是比特在链路上的传播速率。</li><li>提高链路带宽减小了数据的发送时延。</li></ul><p><strong>5. 时延带宽积</strong></p><p>链路的时延带宽积又称为以比特为单位的链路长度，表示在特定时间该网络上的最大数据量——已发送但尚未确认的数据。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi><mi mathvariant="normal">带</mi><mi mathvariant="normal">宽</mi><mi mathvariant="normal">积</mi><mo>=</mo><mi mathvariant="normal">传</mi><mi mathvariant="normal">播</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">延</mi><mo>×</mo><mi mathvariant="normal">带</mi><mi mathvariant="normal">宽</mi></mrow><annotation encoding="application/x-tex">时延带宽积 = 传播时延 \times 带宽</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span><span class="mord cjk_fallback">积</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">传</span><span class="mord cjk_fallback">播</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">延</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">宽</span></span></span></span></span></p><p><strong>6. 往返时间</strong></p><p>往返时间RTT（Round-Trip Time）表示从发送方发送数据开始，到发送方收到接收方确认的时间间隔。（Ping命令的时间）</p><p><strong>7. 利用率</strong></p><ul><li>信道利用率：指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。信道利用率并非越高越好。</li><li>网络利用率：是全网络的信道利用率的加权平均值。</li></ul><p>时延与网络利用率的关系：</p><p>根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。</p><p>若令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">D_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示网络空闲时的时延，<em>D</em> 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 <em>D</em> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">D_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之间的关系：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>=</mo><mfrac><msub><mi>D</mi><mn>0</mn></msub><mrow><mn>1</mn><mo>−</mo><mi>U</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">D=\frac{D_0}{1-U}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.1296600000000003em;vertical-align:-0.7693300000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>U 是网络的利用率，数值在 0 到 1 之间。</p><p><a href="/pic/network/1-10.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-10.png" class="lazyload"></a></p><h2 id="计算机网络的体系结构"><a class="markdownIt-Anchor" href="#计算机网络的体系结构"></a> 计算机网络的体系结构</h2><p>计算机网络的<strong>体系结构</strong>(architecture)是计算机网络的各层及其协议的集合。 体系结构就是这个计算机网络及其部件所应完成的功能的<strong>精确定义</strong>。<strong>实现</strong>(implementation)是遵循这种体系结构的前提下用何种硬件或软件完成这些功能的问题。体系结构是抽象的，而实现则是具体的，是真正在运行的计算机硬件和软件。</p><p><strong>计算机网络分层的好处</strong>：各层之间是独立的；灵活性好；结构上可分割开；易于实现和维护；能促进标准化工作。</p><p>层数多少要适当：若层数太少，就会使每一层的协议太复杂；层数太多又会在描述和综合各层功能的系统工程任务时遇到较多的困难。</p><p><a href="/pic/network/1-11.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-11.png" class="lazyload"></a></p><h3 id="osi-参考模型"><a class="markdownIt-Anchor" href="#osi-参考模型"></a> OSI 参考模型</h3><ul><li><strong>应用层</strong>：能够产生网络流量，能够和用户交互的应用程序。</li><li><strong>表示层</strong>：在数据传输之前进行的加密、压缩等处理。</li><li><strong>会话层</strong>：服务器和客户端建立的会话连接（可以通过 netstat -n 查看会话）。</li><li><strong>传输层</strong>：可以进行可靠传输、不可靠传输以及流量传输。</li><li><strong>网络层</strong>：负责选择最佳路径，进行IP地址编址（ ipv4和ipv6变化只会影响网络层 ）。</li><li><strong>数据链路层</strong>：负责数据的封装，帧的开始和结束、透明传输、差错校验（纠错由传输层解决）</li><li><strong>物理层</strong>：定义网络设备接口标准，电气标准(电压)，如何在物理链路上传输的更快。</li></ul><p>OSI参考模型对网络排错的意义：</p><p>每一层都为上一层提供服务，一旦某一层崩了，上面所有层都崩了，所以排查问题从最上层（物理层）排查。</p><ol><li>物理层故障怎么办？查看链接状态，发送和接收的数据包数值；</li><li>数据链路层故障怎么办？Mac地址冲突，2个一样的Mac地址同时访问；ADSL(非对称数字用户线路)欠费；两端的接口网速没有协商一致；计算机连接到其它VLAN(虚拟互联网)中；</li><li>网络层故障怎么办？配置错误的IP地址，子网掩码，网关；数据有没有通过各个网关到达指定位置；</li><li>应用层(合并3层)故障怎么办？应用程序配置问题；</li></ol><p>OSI参考模型和网络安全解决办法：</p><ol><li>物理层安全隐患？别人能私自接入你的网络，应该拔掉不用的网线或接口；</li><li>数据链路层安全隐患？ADSL账号密码，VLAN，交换机端口绑定Mac地址；</li><li>网络层安全隐患？路由器上使用ACL(访问控制列表)控制数据包流量；防火墙设置；</li><li>应用层安全隐患？应用程序有没有漏洞；</li></ol><p>开发系统信息交换涉及到的概念：</p><ul><li>实体：交换信息的硬件或软件进程；</li><li>协议：控制两个对等实体通信的规则；</li><li>服务：下层向上层提供服务，上层需要使用下层提供的服务来实现本层的功能；</li><li>服务访问点SAP：相邻两层实体间交换信息的地方；</li></ul><p><a href="/pic/network/1-12.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-12.png" class="lazyload"></a></p><p>需要注意的是：</p><ol><li>本层的服务用户只能看见服务而无法看见下面的协议。</li><li>下面的协议对上面的服务用户是透明的。</li><li>协议是“水平的”，即协议是控制对等实体之间通信的规则。</li><li>服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</li></ol><p><strong>数据的传输过程</strong></p><p><a href="/pic/network/1-13.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/pic/network/1-13.png" class="lazyload"></a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
